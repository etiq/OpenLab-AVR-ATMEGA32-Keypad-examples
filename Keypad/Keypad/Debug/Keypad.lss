
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001dae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00001dae  00001e22  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         000006cc  00000000  00000000  00001e3c  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000085  00000000  00000000  00002508  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000180  00000000  00000000  0000258d  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001d6  00000000  00000000  0000270d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002327  00000000  00000000  000028e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fca  00000000  00000000  00004c0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001af5  00000000  00000000  00005bd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001e0  00000000  00000000  000076cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003bd  00000000  00000000  000078ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a79  00000000  00000000  00007c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000005b3  00000000  00000000  000086e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000030  00000000  00000000  00008c95  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee ea       	ldi	r30, 0xAE	; 174
      68:	fd e1       	ldi	r31, 0x1D	; 29
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
      76:	0e 94 b1 08 	call	0x1162	; 0x1162 <main>
      7a:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <CMD>:

#define RS_SET		PORTC |= 0x04   		/* SET PORTC THIRD BIT for RS */
#define RS_CLEAR	PORTC &= 0xFB   		/* CLEAR PORTC THIRD BIT for RS */

void CMD(unsigned char cmd)
{                             
      82:	0f 93       	push	r16
      84:	1f 93       	push	r17
      86:	df 93       	push	r29
      88:	cf 93       	push	r28
      8a:	cd b7       	in	r28, 0x3d	; 61
      8c:	de b7       	in	r29, 0x3e	; 62
      8e:	ab 97       	sbiw	r28, 0x2b	; 43
      90:	0f b6       	in	r0, 0x3f	; 63
      92:	f8 94       	cli
      94:	de bf       	out	0x3e, r29	; 62
      96:	0f be       	out	0x3f, r0	; 63
      98:	cd bf       	out	0x3d, r28	; 61
      9a:	8b a7       	std	Y+43, r24	; 0x2b
        DATA = cmd;							// Write command to data port
      9c:	82 e3       	ldi	r24, 0x32	; 50
      9e:	90 e0       	ldi	r25, 0x00	; 0
      a0:	2b a5       	ldd	r18, Y+43	; 0x2b
      a2:	fc 01       	movw	r30, r24
      a4:	20 83       	st	Z, r18
	RW_CLEAR;							// Set the control signals
      a6:	85 e3       	ldi	r24, 0x35	; 53
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	25 e3       	ldi	r18, 0x35	; 53
      ac:	30 e0       	ldi	r19, 0x00	; 0
      ae:	f9 01       	movw	r30, r18
      b0:	20 81       	ld	r18, Z
      b2:	2d 7f       	andi	r18, 0xFD	; 253
      b4:	fc 01       	movw	r30, r24
      b6:	20 83       	st	Z, r18
        RS_CLEAR;
      b8:	85 e3       	ldi	r24, 0x35	; 53
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	25 e3       	ldi	r18, 0x35	; 53
      be:	30 e0       	ldi	r19, 0x00	; 0
      c0:	f9 01       	movw	r30, r18
      c2:	20 81       	ld	r18, Z
      c4:	2b 7f       	andi	r18, 0xFB	; 251
      c6:	fc 01       	movw	r30, r24
      c8:	20 83       	st	Z, r18
      ca:	80 e0       	ldi	r24, 0x00	; 0
      cc:	90 e0       	ldi	r25, 0x00	; 0
      ce:	a0 e2       	ldi	r26, 0x20	; 32
      d0:	b1 e4       	ldi	r27, 0x41	; 65
      d2:	89 83       	std	Y+1, r24	; 0x01
      d4:	9a 83       	std	Y+2, r25	; 0x02
      d6:	ab 83       	std	Y+3, r26	; 0x03
      d8:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
      da:	69 81       	ldd	r22, Y+1	; 0x01
      dc:	7a 81       	ldd	r23, Y+2	; 0x02
      de:	8b 81       	ldd	r24, Y+3	; 0x03
      e0:	9c 81       	ldd	r25, Y+4	; 0x04
      e2:	20 e0       	ldi	r18, 0x00	; 0
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	4a e7       	ldi	r20, 0x7A	; 122
      e8:	53 e4       	ldi	r21, 0x43	; 67
      ea:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
      ee:	dc 01       	movw	r26, r24
      f0:	cb 01       	movw	r24, r22
      f2:	8d 83       	std	Y+5, r24	; 0x05
      f4:	9e 83       	std	Y+6, r25	; 0x06
      f6:	af 83       	std	Y+7, r26	; 0x07
      f8:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
      fa:	11 e0       	ldi	r17, 0x01	; 1
      fc:	6d 81       	ldd	r22, Y+5	; 0x05
      fe:	7e 81       	ldd	r23, Y+6	; 0x06
     100:	8f 81       	ldd	r24, Y+7	; 0x07
     102:	98 85       	ldd	r25, Y+8	; 0x08
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	40 e8       	ldi	r20, 0x80	; 128
     10a:	5f e3       	ldi	r21, 0x3F	; 63
     10c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     110:	88 23       	and	r24, r24
     112:	0c f0       	brlt	.+2      	; 0x116 <CMD+0x94>
     114:	10 e0       	ldi	r17, 0x00	; 0
     116:	11 23       	and	r17, r17
     118:	29 f0       	breq	.+10     	; 0x124 <CMD+0xa2>
		__ticks = 1;
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	9a 87       	std	Y+10, r25	; 0x0a
     120:	89 87       	std	Y+9, r24	; 0x09
     122:	46 c0       	rjmp	.+140    	; 0x1b0 <CMD+0x12e>
	else if (__tmp > 65535)
     124:	11 e0       	ldi	r17, 0x01	; 1
     126:	6d 81       	ldd	r22, Y+5	; 0x05
     128:	7e 81       	ldd	r23, Y+6	; 0x06
     12a:	8f 81       	ldd	r24, Y+7	; 0x07
     12c:	98 85       	ldd	r25, Y+8	; 0x08
     12e:	20 e0       	ldi	r18, 0x00	; 0
     130:	3f ef       	ldi	r19, 0xFF	; 255
     132:	4f e7       	ldi	r20, 0x7F	; 127
     134:	57 e4       	ldi	r21, 0x47	; 71
     136:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     13a:	18 16       	cp	r1, r24
     13c:	0c f0       	brlt	.+2      	; 0x140 <CMD+0xbe>
     13e:	10 e0       	ldi	r17, 0x00	; 0
     140:	11 23       	and	r17, r17
     142:	61 f1       	breq	.+88     	; 0x19c <CMD+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     144:	69 81       	ldd	r22, Y+1	; 0x01
     146:	7a 81       	ldd	r23, Y+2	; 0x02
     148:	8b 81       	ldd	r24, Y+3	; 0x03
     14a:	9c 81       	ldd	r25, Y+4	; 0x04
     14c:	20 e0       	ldi	r18, 0x00	; 0
     14e:	30 e0       	ldi	r19, 0x00	; 0
     150:	40 e2       	ldi	r20, 0x20	; 32
     152:	51 e4       	ldi	r21, 0x41	; 65
     154:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     158:	dc 01       	movw	r26, r24
     15a:	cb 01       	movw	r24, r22
     15c:	bc 01       	movw	r22, r24
     15e:	cd 01       	movw	r24, r26
     160:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     164:	dc 01       	movw	r26, r24
     166:	cb 01       	movw	r24, r22
     168:	9a 87       	std	Y+10, r25	; 0x0a
     16a:	89 87       	std	Y+9, r24	; 0x09
     16c:	12 c0       	rjmp	.+36     	; 0x192 <CMD+0x110>
     16e:	89 e1       	ldi	r24, 0x19	; 25
     170:	90 e0       	ldi	r25, 0x00	; 0
     172:	9c 87       	std	Y+12, r25	; 0x0c
     174:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     176:	8b 85       	ldd	r24, Y+11	; 0x0b
     178:	9c 85       	ldd	r25, Y+12	; 0x0c
     17a:	8c 01       	movw	r16, r24
     17c:	c8 01       	movw	r24, r16
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	f1 f7       	brne	.-4      	; 0x17e <CMD+0xfc>
     182:	8c 01       	movw	r16, r24
     184:	1c 87       	std	Y+12, r17	; 0x0c
     186:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     188:	89 85       	ldd	r24, Y+9	; 0x09
     18a:	9a 85       	ldd	r25, Y+10	; 0x0a
     18c:	01 97       	sbiw	r24, 0x01	; 1
     18e:	9a 87       	std	Y+10, r25	; 0x0a
     190:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     192:	89 85       	ldd	r24, Y+9	; 0x09
     194:	9a 85       	ldd	r25, Y+10	; 0x0a
     196:	00 97       	sbiw	r24, 0x00	; 0
     198:	51 f7       	brne	.-44     	; 0x16e <CMD+0xec>
     19a:	17 c0       	rjmp	.+46     	; 0x1ca <CMD+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     19c:	6d 81       	ldd	r22, Y+5	; 0x05
     19e:	7e 81       	ldd	r23, Y+6	; 0x06
     1a0:	8f 81       	ldd	r24, Y+7	; 0x07
     1a2:	98 85       	ldd	r25, Y+8	; 0x08
     1a4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     1a8:	dc 01       	movw	r26, r24
     1aa:	cb 01       	movw	r24, r22
     1ac:	9a 87       	std	Y+10, r25	; 0x0a
     1ae:	89 87       	std	Y+9, r24	; 0x09
     1b0:	89 85       	ldd	r24, Y+9	; 0x09
     1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b4:	9e 87       	std	Y+14, r25	; 0x0e
     1b6:	8d 87       	std	Y+13, r24	; 0x0d
     1b8:	8d 85       	ldd	r24, Y+13	; 0x0d
     1ba:	9e 85       	ldd	r25, Y+14	; 0x0e
     1bc:	8c 01       	movw	r16, r24
     1be:	f8 01       	movw	r30, r16
     1c0:	31 97       	sbiw	r30, 0x01	; 1
     1c2:	f1 f7       	brne	.-4      	; 0x1c0 <CMD+0x13e>
     1c4:	8f 01       	movw	r16, r30
     1c6:	1e 87       	std	Y+14, r17	; 0x0e
     1c8:	0d 87       	std	Y+13, r16	; 0x0d
    	_delay_ms(10);						
        ENABLE;								// Clock the command in
     1ca:	85 e3       	ldi	r24, 0x35	; 53
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	25 e3       	ldi	r18, 0x35	; 53
     1d0:	30 e0       	ldi	r19, 0x00	; 0
     1d2:	f9 01       	movw	r30, r18
     1d4:	20 81       	ld	r18, Z
     1d6:	21 60       	ori	r18, 0x01	; 1
     1d8:	fc 01       	movw	r30, r24
     1da:	20 83       	st	Z, r18
     1dc:	80 e0       	ldi	r24, 0x00	; 0
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	a0 e2       	ldi	r26, 0x20	; 32
     1e2:	b1 e4       	ldi	r27, 0x41	; 65
     1e4:	8f 87       	std	Y+15, r24	; 0x0f
     1e6:	98 8b       	std	Y+16, r25	; 0x10
     1e8:	a9 8b       	std	Y+17, r26	; 0x11
     1ea:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     1ec:	6f 85       	ldd	r22, Y+15	; 0x0f
     1ee:	78 89       	ldd	r23, Y+16	; 0x10
     1f0:	89 89       	ldd	r24, Y+17	; 0x11
     1f2:	9a 89       	ldd	r25, Y+18	; 0x12
     1f4:	20 e0       	ldi	r18, 0x00	; 0
     1f6:	30 e0       	ldi	r19, 0x00	; 0
     1f8:	4a e7       	ldi	r20, 0x7A	; 122
     1fa:	53 e4       	ldi	r21, 0x43	; 67
     1fc:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     200:	dc 01       	movw	r26, r24
     202:	cb 01       	movw	r24, r22
     204:	8b 8b       	std	Y+19, r24	; 0x13
     206:	9c 8b       	std	Y+20, r25	; 0x14
     208:	ad 8b       	std	Y+21, r26	; 0x15
     20a:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     20c:	11 e0       	ldi	r17, 0x01	; 1
     20e:	6b 89       	ldd	r22, Y+19	; 0x13
     210:	7c 89       	ldd	r23, Y+20	; 0x14
     212:	8d 89       	ldd	r24, Y+21	; 0x15
     214:	9e 89       	ldd	r25, Y+22	; 0x16
     216:	20 e0       	ldi	r18, 0x00	; 0
     218:	30 e0       	ldi	r19, 0x00	; 0
     21a:	40 e8       	ldi	r20, 0x80	; 128
     21c:	5f e3       	ldi	r21, 0x3F	; 63
     21e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     222:	88 23       	and	r24, r24
     224:	0c f0       	brlt	.+2      	; 0x228 <CMD+0x1a6>
     226:	10 e0       	ldi	r17, 0x00	; 0
     228:	11 23       	and	r17, r17
     22a:	29 f0       	breq	.+10     	; 0x236 <CMD+0x1b4>
		__ticks = 1;
     22c:	81 e0       	ldi	r24, 0x01	; 1
     22e:	90 e0       	ldi	r25, 0x00	; 0
     230:	98 8f       	std	Y+24, r25	; 0x18
     232:	8f 8b       	std	Y+23, r24	; 0x17
     234:	46 c0       	rjmp	.+140    	; 0x2c2 <CMD+0x240>
	else if (__tmp > 65535)
     236:	11 e0       	ldi	r17, 0x01	; 1
     238:	6b 89       	ldd	r22, Y+19	; 0x13
     23a:	7c 89       	ldd	r23, Y+20	; 0x14
     23c:	8d 89       	ldd	r24, Y+21	; 0x15
     23e:	9e 89       	ldd	r25, Y+22	; 0x16
     240:	20 e0       	ldi	r18, 0x00	; 0
     242:	3f ef       	ldi	r19, 0xFF	; 255
     244:	4f e7       	ldi	r20, 0x7F	; 127
     246:	57 e4       	ldi	r21, 0x47	; 71
     248:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     24c:	18 16       	cp	r1, r24
     24e:	0c f0       	brlt	.+2      	; 0x252 <CMD+0x1d0>
     250:	10 e0       	ldi	r17, 0x00	; 0
     252:	11 23       	and	r17, r17
     254:	61 f1       	breq	.+88     	; 0x2ae <CMD+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     256:	6f 85       	ldd	r22, Y+15	; 0x0f
     258:	78 89       	ldd	r23, Y+16	; 0x10
     25a:	89 89       	ldd	r24, Y+17	; 0x11
     25c:	9a 89       	ldd	r25, Y+18	; 0x12
     25e:	20 e0       	ldi	r18, 0x00	; 0
     260:	30 e0       	ldi	r19, 0x00	; 0
     262:	40 e2       	ldi	r20, 0x20	; 32
     264:	51 e4       	ldi	r21, 0x41	; 65
     266:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     26a:	dc 01       	movw	r26, r24
     26c:	cb 01       	movw	r24, r22
     26e:	bc 01       	movw	r22, r24
     270:	cd 01       	movw	r24, r26
     272:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     276:	dc 01       	movw	r26, r24
     278:	cb 01       	movw	r24, r22
     27a:	98 8f       	std	Y+24, r25	; 0x18
     27c:	8f 8b       	std	Y+23, r24	; 0x17
     27e:	12 c0       	rjmp	.+36     	; 0x2a4 <CMD+0x222>
     280:	89 e1       	ldi	r24, 0x19	; 25
     282:	90 e0       	ldi	r25, 0x00	; 0
     284:	9a 8f       	std	Y+26, r25	; 0x1a
     286:	89 8f       	std	Y+25, r24	; 0x19
     288:	89 8d       	ldd	r24, Y+25	; 0x19
     28a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     28c:	8c 01       	movw	r16, r24
     28e:	c8 01       	movw	r24, r16
     290:	01 97       	sbiw	r24, 0x01	; 1
     292:	f1 f7       	brne	.-4      	; 0x290 <CMD+0x20e>
     294:	8c 01       	movw	r16, r24
     296:	1a 8f       	std	Y+26, r17	; 0x1a
     298:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     29a:	8f 89       	ldd	r24, Y+23	; 0x17
     29c:	98 8d       	ldd	r25, Y+24	; 0x18
     29e:	01 97       	sbiw	r24, 0x01	; 1
     2a0:	98 8f       	std	Y+24, r25	; 0x18
     2a2:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     2a4:	8f 89       	ldd	r24, Y+23	; 0x17
     2a6:	98 8d       	ldd	r25, Y+24	; 0x18
     2a8:	00 97       	sbiw	r24, 0x00	; 0
     2aa:	51 f7       	brne	.-44     	; 0x280 <CMD+0x1fe>
     2ac:	17 c0       	rjmp	.+46     	; 0x2dc <CMD+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     2ae:	6b 89       	ldd	r22, Y+19	; 0x13
     2b0:	7c 89       	ldd	r23, Y+20	; 0x14
     2b2:	8d 89       	ldd	r24, Y+21	; 0x15
     2b4:	9e 89       	ldd	r25, Y+22	; 0x16
     2b6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     2ba:	dc 01       	movw	r26, r24
     2bc:	cb 01       	movw	r24, r22
     2be:	98 8f       	std	Y+24, r25	; 0x18
     2c0:	8f 8b       	std	Y+23, r24	; 0x17
     2c2:	8f 89       	ldd	r24, Y+23	; 0x17
     2c4:	98 8d       	ldd	r25, Y+24	; 0x18
     2c6:	9c 8f       	std	Y+28, r25	; 0x1c
     2c8:	8b 8f       	std	Y+27, r24	; 0x1b
     2ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
     2cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
     2ce:	8c 01       	movw	r16, r24
     2d0:	f8 01       	movw	r30, r16
     2d2:	31 97       	sbiw	r30, 0x01	; 1
     2d4:	f1 f7       	brne	.-4      	; 0x2d2 <CMD+0x250>
     2d6:	8f 01       	movw	r16, r30
     2d8:	1c 8f       	std	Y+28, r17	; 0x1c
     2da:	0b 8f       	std	Y+27, r16	; 0x1b
        _delay_ms(10);						// Small delay for sending the command
        DISABLE;
     2dc:	85 e3       	ldi	r24, 0x35	; 53
     2de:	90 e0       	ldi	r25, 0x00	; 0
     2e0:	25 e3       	ldi	r18, 0x35	; 53
     2e2:	30 e0       	ldi	r19, 0x00	; 0
     2e4:	f9 01       	movw	r30, r18
     2e6:	20 81       	ld	r18, Z
     2e8:	2e 7f       	andi	r18, 0xFE	; 254
     2ea:	fc 01       	movw	r30, r24
     2ec:	20 83       	st	Z, r18
	RS_CLEAR;
     2ee:	85 e3       	ldi	r24, 0x35	; 53
     2f0:	90 e0       	ldi	r25, 0x00	; 0
     2f2:	25 e3       	ldi	r18, 0x35	; 53
     2f4:	30 e0       	ldi	r19, 0x00	; 0
     2f6:	f9 01       	movw	r30, r18
     2f8:	20 81       	ld	r18, Z
     2fa:	2b 7f       	andi	r18, 0xFB	; 251
     2fc:	fc 01       	movw	r30, r24
     2fe:	20 83       	st	Z, r18
     300:	80 e0       	ldi	r24, 0x00	; 0
     302:	90 e0       	ldi	r25, 0x00	; 0
     304:	a0 e2       	ldi	r26, 0x20	; 32
     306:	b1 e4       	ldi	r27, 0x41	; 65
     308:	8d 8f       	std	Y+29, r24	; 0x1d
     30a:	9e 8f       	std	Y+30, r25	; 0x1e
     30c:	af 8f       	std	Y+31, r26	; 0x1f
     30e:	b8 a3       	std	Y+32, r27	; 0x20
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     310:	6d 8d       	ldd	r22, Y+29	; 0x1d
     312:	7e 8d       	ldd	r23, Y+30	; 0x1e
     314:	8f 8d       	ldd	r24, Y+31	; 0x1f
     316:	98 a1       	ldd	r25, Y+32	; 0x20
     318:	20 e0       	ldi	r18, 0x00	; 0
     31a:	30 e0       	ldi	r19, 0x00	; 0
     31c:	4a e7       	ldi	r20, 0x7A	; 122
     31e:	53 e4       	ldi	r21, 0x43	; 67
     320:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     324:	dc 01       	movw	r26, r24
     326:	cb 01       	movw	r24, r22
     328:	89 a3       	std	Y+33, r24	; 0x21
     32a:	9a a3       	std	Y+34, r25	; 0x22
     32c:	ab a3       	std	Y+35, r26	; 0x23
     32e:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     330:	11 e0       	ldi	r17, 0x01	; 1
     332:	69 a1       	ldd	r22, Y+33	; 0x21
     334:	7a a1       	ldd	r23, Y+34	; 0x22
     336:	8b a1       	ldd	r24, Y+35	; 0x23
     338:	9c a1       	ldd	r25, Y+36	; 0x24
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	40 e8       	ldi	r20, 0x80	; 128
     340:	5f e3       	ldi	r21, 0x3F	; 63
     342:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     346:	88 23       	and	r24, r24
     348:	0c f0       	brlt	.+2      	; 0x34c <CMD+0x2ca>
     34a:	10 e0       	ldi	r17, 0x00	; 0
     34c:	11 23       	and	r17, r17
     34e:	29 f0       	breq	.+10     	; 0x35a <CMD+0x2d8>
		__ticks = 1;
     350:	81 e0       	ldi	r24, 0x01	; 1
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	9e a3       	std	Y+38, r25	; 0x26
     356:	8d a3       	std	Y+37, r24	; 0x25
     358:	46 c0       	rjmp	.+140    	; 0x3e6 <CMD+0x364>
	else if (__tmp > 65535)
     35a:	11 e0       	ldi	r17, 0x01	; 1
     35c:	69 a1       	ldd	r22, Y+33	; 0x21
     35e:	7a a1       	ldd	r23, Y+34	; 0x22
     360:	8b a1       	ldd	r24, Y+35	; 0x23
     362:	9c a1       	ldd	r25, Y+36	; 0x24
     364:	20 e0       	ldi	r18, 0x00	; 0
     366:	3f ef       	ldi	r19, 0xFF	; 255
     368:	4f e7       	ldi	r20, 0x7F	; 127
     36a:	57 e4       	ldi	r21, 0x47	; 71
     36c:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     370:	18 16       	cp	r1, r24
     372:	0c f0       	brlt	.+2      	; 0x376 <CMD+0x2f4>
     374:	10 e0       	ldi	r17, 0x00	; 0
     376:	11 23       	and	r17, r17
     378:	61 f1       	breq	.+88     	; 0x3d2 <CMD+0x350>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     37a:	6d 8d       	ldd	r22, Y+29	; 0x1d
     37c:	7e 8d       	ldd	r23, Y+30	; 0x1e
     37e:	8f 8d       	ldd	r24, Y+31	; 0x1f
     380:	98 a1       	ldd	r25, Y+32	; 0x20
     382:	20 e0       	ldi	r18, 0x00	; 0
     384:	30 e0       	ldi	r19, 0x00	; 0
     386:	40 e2       	ldi	r20, 0x20	; 32
     388:	51 e4       	ldi	r21, 0x41	; 65
     38a:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     38e:	dc 01       	movw	r26, r24
     390:	cb 01       	movw	r24, r22
     392:	bc 01       	movw	r22, r24
     394:	cd 01       	movw	r24, r26
     396:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     39a:	dc 01       	movw	r26, r24
     39c:	cb 01       	movw	r24, r22
     39e:	9e a3       	std	Y+38, r25	; 0x26
     3a0:	8d a3       	std	Y+37, r24	; 0x25
     3a2:	12 c0       	rjmp	.+36     	; 0x3c8 <CMD+0x346>
     3a4:	89 e1       	ldi	r24, 0x19	; 25
     3a6:	90 e0       	ldi	r25, 0x00	; 0
     3a8:	98 a7       	std	Y+40, r25	; 0x28
     3aa:	8f a3       	std	Y+39, r24	; 0x27
     3ac:	8f a1       	ldd	r24, Y+39	; 0x27
     3ae:	98 a5       	ldd	r25, Y+40	; 0x28
     3b0:	8c 01       	movw	r16, r24
     3b2:	c8 01       	movw	r24, r16
     3b4:	01 97       	sbiw	r24, 0x01	; 1
     3b6:	f1 f7       	brne	.-4      	; 0x3b4 <CMD+0x332>
     3b8:	8c 01       	movw	r16, r24
     3ba:	18 a7       	std	Y+40, r17	; 0x28
     3bc:	0f a3       	std	Y+39, r16	; 0x27
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     3be:	8d a1       	ldd	r24, Y+37	; 0x25
     3c0:	9e a1       	ldd	r25, Y+38	; 0x26
     3c2:	01 97       	sbiw	r24, 0x01	; 1
     3c4:	9e a3       	std	Y+38, r25	; 0x26
     3c6:	8d a3       	std	Y+37, r24	; 0x25
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     3c8:	8d a1       	ldd	r24, Y+37	; 0x25
     3ca:	9e a1       	ldd	r25, Y+38	; 0x26
     3cc:	00 97       	sbiw	r24, 0x00	; 0
     3ce:	51 f7       	brne	.-44     	; 0x3a4 <CMD+0x322>
     3d0:	17 c0       	rjmp	.+46     	; 0x400 <CMD+0x37e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     3d2:	69 a1       	ldd	r22, Y+33	; 0x21
     3d4:	7a a1       	ldd	r23, Y+34	; 0x22
     3d6:	8b a1       	ldd	r24, Y+35	; 0x23
     3d8:	9c a1       	ldd	r25, Y+36	; 0x24
     3da:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     3de:	dc 01       	movw	r26, r24
     3e0:	cb 01       	movw	r24, r22
     3e2:	9e a3       	std	Y+38, r25	; 0x26
     3e4:	8d a3       	std	Y+37, r24	; 0x25
     3e6:	8d a1       	ldd	r24, Y+37	; 0x25
     3e8:	9e a1       	ldd	r25, Y+38	; 0x26
     3ea:	9a a7       	std	Y+42, r25	; 0x2a
     3ec:	89 a7       	std	Y+41, r24	; 0x29
     3ee:	89 a5       	ldd	r24, Y+41	; 0x29
     3f0:	9a a5       	ldd	r25, Y+42	; 0x2a
     3f2:	8c 01       	movw	r16, r24
     3f4:	f8 01       	movw	r30, r16
     3f6:	31 97       	sbiw	r30, 0x01	; 1
     3f8:	f1 f7       	brne	.-4      	; 0x3f6 <CMD+0x374>
     3fa:	8f 01       	movw	r16, r30
     3fc:	1a a7       	std	Y+42, r17	; 0x2a
     3fe:	09 a7       	std	Y+41, r16	; 0x29
        _delay_ms(10);
        return;
}
     400:	ab 96       	adiw	r28, 0x2b	; 43
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	f8 94       	cli
     406:	de bf       	out	0x3e, r29	; 62
     408:	0f be       	out	0x3f, r0	; 63
     40a:	cd bf       	out	0x3d, r28	; 61
     40c:	cf 91       	pop	r28
     40e:	df 91       	pop	r29
     410:	1f 91       	pop	r17
     412:	0f 91       	pop	r16
     414:	08 95       	ret

00000416 <CharData>:

void CharData(char data)
{											// 8-bit interface for writing characters
     416:	0f 93       	push	r16
     418:	1f 93       	push	r17
     41a:	df 93       	push	r29
     41c:	cf 93       	push	r28
     41e:	cd b7       	in	r28, 0x3d	; 61
     420:	de b7       	in	r29, 0x3e	; 62
     422:	6d 97       	sbiw	r28, 0x1d	; 29
     424:	0f b6       	in	r0, 0x3f	; 63
     426:	f8 94       	cli
     428:	de bf       	out	0x3e, r29	; 62
     42a:	0f be       	out	0x3f, r0	; 63
     42c:	cd bf       	out	0x3d, r28	; 61
     42e:	8d 8f       	std	Y+29, r24	; 0x1d
	DATA = data;							// Write data to port
     430:	82 e3       	ldi	r24, 0x32	; 50
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	2d 8d       	ldd	r18, Y+29	; 0x1d
     436:	fc 01       	movw	r30, r24
     438:	20 83       	st	Z, r18
	RS_SET;									// Set control bits
     43a:	85 e3       	ldi	r24, 0x35	; 53
     43c:	90 e0       	ldi	r25, 0x00	; 0
     43e:	25 e3       	ldi	r18, 0x35	; 53
     440:	30 e0       	ldi	r19, 0x00	; 0
     442:	f9 01       	movw	r30, r18
     444:	20 81       	ld	r18, Z
     446:	24 60       	ori	r18, 0x04	; 4
     448:	fc 01       	movw	r30, r24
     44a:	20 83       	st	Z, r18
	RW_CLEAR;
     44c:	85 e3       	ldi	r24, 0x35	; 53
     44e:	90 e0       	ldi	r25, 0x00	; 0
     450:	25 e3       	ldi	r18, 0x35	; 53
     452:	30 e0       	ldi	r19, 0x00	; 0
     454:	f9 01       	movw	r30, r18
     456:	20 81       	ld	r18, Z
     458:	2d 7f       	andi	r18, 0xFD	; 253
     45a:	fc 01       	movw	r30, r24
     45c:	20 83       	st	Z, r18
     45e:	80 e0       	ldi	r24, 0x00	; 0
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	a0 e2       	ldi	r26, 0x20	; 32
     464:	b1 e4       	ldi	r27, 0x41	; 65
     466:	89 83       	std	Y+1, r24	; 0x01
     468:	9a 83       	std	Y+2, r25	; 0x02
     46a:	ab 83       	std	Y+3, r26	; 0x03
     46c:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     46e:	69 81       	ldd	r22, Y+1	; 0x01
     470:	7a 81       	ldd	r23, Y+2	; 0x02
     472:	8b 81       	ldd	r24, Y+3	; 0x03
     474:	9c 81       	ldd	r25, Y+4	; 0x04
     476:	20 e0       	ldi	r18, 0x00	; 0
     478:	30 e0       	ldi	r19, 0x00	; 0
     47a:	4a e7       	ldi	r20, 0x7A	; 122
     47c:	53 e4       	ldi	r21, 0x43	; 67
     47e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     482:	dc 01       	movw	r26, r24
     484:	cb 01       	movw	r24, r22
     486:	8d 83       	std	Y+5, r24	; 0x05
     488:	9e 83       	std	Y+6, r25	; 0x06
     48a:	af 83       	std	Y+7, r26	; 0x07
     48c:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     48e:	11 e0       	ldi	r17, 0x01	; 1
     490:	6d 81       	ldd	r22, Y+5	; 0x05
     492:	7e 81       	ldd	r23, Y+6	; 0x06
     494:	8f 81       	ldd	r24, Y+7	; 0x07
     496:	98 85       	ldd	r25, Y+8	; 0x08
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	30 e0       	ldi	r19, 0x00	; 0
     49c:	40 e8       	ldi	r20, 0x80	; 128
     49e:	5f e3       	ldi	r21, 0x3F	; 63
     4a0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     4a4:	88 23       	and	r24, r24
     4a6:	0c f0       	brlt	.+2      	; 0x4aa <CharData+0x94>
     4a8:	10 e0       	ldi	r17, 0x00	; 0
     4aa:	11 23       	and	r17, r17
     4ac:	29 f0       	breq	.+10     	; 0x4b8 <CharData+0xa2>
		__ticks = 1;
     4ae:	81 e0       	ldi	r24, 0x01	; 1
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	9a 87       	std	Y+10, r25	; 0x0a
     4b4:	89 87       	std	Y+9, r24	; 0x09
     4b6:	46 c0       	rjmp	.+140    	; 0x544 <CharData+0x12e>
	else if (__tmp > 65535)
     4b8:	11 e0       	ldi	r17, 0x01	; 1
     4ba:	6d 81       	ldd	r22, Y+5	; 0x05
     4bc:	7e 81       	ldd	r23, Y+6	; 0x06
     4be:	8f 81       	ldd	r24, Y+7	; 0x07
     4c0:	98 85       	ldd	r25, Y+8	; 0x08
     4c2:	20 e0       	ldi	r18, 0x00	; 0
     4c4:	3f ef       	ldi	r19, 0xFF	; 255
     4c6:	4f e7       	ldi	r20, 0x7F	; 127
     4c8:	57 e4       	ldi	r21, 0x47	; 71
     4ca:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     4ce:	18 16       	cp	r1, r24
     4d0:	0c f0       	brlt	.+2      	; 0x4d4 <CharData+0xbe>
     4d2:	10 e0       	ldi	r17, 0x00	; 0
     4d4:	11 23       	and	r17, r17
     4d6:	61 f1       	breq	.+88     	; 0x530 <CharData+0x11a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     4d8:	69 81       	ldd	r22, Y+1	; 0x01
     4da:	7a 81       	ldd	r23, Y+2	; 0x02
     4dc:	8b 81       	ldd	r24, Y+3	; 0x03
     4de:	9c 81       	ldd	r25, Y+4	; 0x04
     4e0:	20 e0       	ldi	r18, 0x00	; 0
     4e2:	30 e0       	ldi	r19, 0x00	; 0
     4e4:	40 e2       	ldi	r20, 0x20	; 32
     4e6:	51 e4       	ldi	r21, 0x41	; 65
     4e8:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     4ec:	dc 01       	movw	r26, r24
     4ee:	cb 01       	movw	r24, r22
     4f0:	bc 01       	movw	r22, r24
     4f2:	cd 01       	movw	r24, r26
     4f4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     4f8:	dc 01       	movw	r26, r24
     4fa:	cb 01       	movw	r24, r22
     4fc:	9a 87       	std	Y+10, r25	; 0x0a
     4fe:	89 87       	std	Y+9, r24	; 0x09
     500:	12 c0       	rjmp	.+36     	; 0x526 <CharData+0x110>
     502:	89 e1       	ldi	r24, 0x19	; 25
     504:	90 e0       	ldi	r25, 0x00	; 0
     506:	9c 87       	std	Y+12, r25	; 0x0c
     508:	8b 87       	std	Y+11, r24	; 0x0b
     50a:	8b 85       	ldd	r24, Y+11	; 0x0b
     50c:	9c 85       	ldd	r25, Y+12	; 0x0c
     50e:	8c 01       	movw	r16, r24
     510:	c8 01       	movw	r24, r16
     512:	01 97       	sbiw	r24, 0x01	; 1
     514:	f1 f7       	brne	.-4      	; 0x512 <CharData+0xfc>
     516:	8c 01       	movw	r16, r24
     518:	1c 87       	std	Y+12, r17	; 0x0c
     51a:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     51c:	89 85       	ldd	r24, Y+9	; 0x09
     51e:	9a 85       	ldd	r25, Y+10	; 0x0a
     520:	01 97       	sbiw	r24, 0x01	; 1
     522:	9a 87       	std	Y+10, r25	; 0x0a
     524:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     526:	89 85       	ldd	r24, Y+9	; 0x09
     528:	9a 85       	ldd	r25, Y+10	; 0x0a
     52a:	00 97       	sbiw	r24, 0x00	; 0
     52c:	51 f7       	brne	.-44     	; 0x502 <CharData+0xec>
     52e:	17 c0       	rjmp	.+46     	; 0x55e <CharData+0x148>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     530:	6d 81       	ldd	r22, Y+5	; 0x05
     532:	7e 81       	ldd	r23, Y+6	; 0x06
     534:	8f 81       	ldd	r24, Y+7	; 0x07
     536:	98 85       	ldd	r25, Y+8	; 0x08
     538:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     53c:	dc 01       	movw	r26, r24
     53e:	cb 01       	movw	r24, r22
     540:	9a 87       	std	Y+10, r25	; 0x0a
     542:	89 87       	std	Y+9, r24	; 0x09
     544:	89 85       	ldd	r24, Y+9	; 0x09
     546:	9a 85       	ldd	r25, Y+10	; 0x0a
     548:	9e 87       	std	Y+14, r25	; 0x0e
     54a:	8d 87       	std	Y+13, r24	; 0x0d
     54c:	8d 85       	ldd	r24, Y+13	; 0x0d
     54e:	9e 85       	ldd	r25, Y+14	; 0x0e
     550:	8c 01       	movw	r16, r24
     552:	f8 01       	movw	r30, r16
     554:	31 97       	sbiw	r30, 0x01	; 1
     556:	f1 f7       	brne	.-4      	; 0x554 <CharData+0x13e>
     558:	8f 01       	movw	r16, r30
     55a:	1e 87       	std	Y+14, r17	; 0x0e
     55c:	0d 87       	std	Y+13, r16	; 0x0d
	_delay_ms(10);
	ENABLE;									// Clock data into LCD
     55e:	85 e3       	ldi	r24, 0x35	; 53
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	25 e3       	ldi	r18, 0x35	; 53
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	f9 01       	movw	r30, r18
     568:	20 81       	ld	r18, Z
     56a:	21 60       	ori	r18, 0x01	; 1
     56c:	fc 01       	movw	r30, r24
     56e:	20 83       	st	Z, r18
     570:	80 e0       	ldi	r24, 0x00	; 0
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	a0 e2       	ldi	r26, 0x20	; 32
     576:	b1 e4       	ldi	r27, 0x41	; 65
     578:	8f 87       	std	Y+15, r24	; 0x0f
     57a:	98 8b       	std	Y+16, r25	; 0x10
     57c:	a9 8b       	std	Y+17, r26	; 0x11
     57e:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     580:	6f 85       	ldd	r22, Y+15	; 0x0f
     582:	78 89       	ldd	r23, Y+16	; 0x10
     584:	89 89       	ldd	r24, Y+17	; 0x11
     586:	9a 89       	ldd	r25, Y+18	; 0x12
     588:	20 e0       	ldi	r18, 0x00	; 0
     58a:	30 e0       	ldi	r19, 0x00	; 0
     58c:	4a e7       	ldi	r20, 0x7A	; 122
     58e:	53 e4       	ldi	r21, 0x43	; 67
     590:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     594:	dc 01       	movw	r26, r24
     596:	cb 01       	movw	r24, r22
     598:	8b 8b       	std	Y+19, r24	; 0x13
     59a:	9c 8b       	std	Y+20, r25	; 0x14
     59c:	ad 8b       	std	Y+21, r26	; 0x15
     59e:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     5a0:	11 e0       	ldi	r17, 0x01	; 1
     5a2:	6b 89       	ldd	r22, Y+19	; 0x13
     5a4:	7c 89       	ldd	r23, Y+20	; 0x14
     5a6:	8d 89       	ldd	r24, Y+21	; 0x15
     5a8:	9e 89       	ldd	r25, Y+22	; 0x16
     5aa:	20 e0       	ldi	r18, 0x00	; 0
     5ac:	30 e0       	ldi	r19, 0x00	; 0
     5ae:	40 e8       	ldi	r20, 0x80	; 128
     5b0:	5f e3       	ldi	r21, 0x3F	; 63
     5b2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     5b6:	88 23       	and	r24, r24
     5b8:	0c f0       	brlt	.+2      	; 0x5bc <CharData+0x1a6>
     5ba:	10 e0       	ldi	r17, 0x00	; 0
     5bc:	11 23       	and	r17, r17
     5be:	29 f0       	breq	.+10     	; 0x5ca <CharData+0x1b4>
		__ticks = 1;
     5c0:	81 e0       	ldi	r24, 0x01	; 1
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	98 8f       	std	Y+24, r25	; 0x18
     5c6:	8f 8b       	std	Y+23, r24	; 0x17
     5c8:	46 c0       	rjmp	.+140    	; 0x656 <CharData+0x240>
	else if (__tmp > 65535)
     5ca:	11 e0       	ldi	r17, 0x01	; 1
     5cc:	6b 89       	ldd	r22, Y+19	; 0x13
     5ce:	7c 89       	ldd	r23, Y+20	; 0x14
     5d0:	8d 89       	ldd	r24, Y+21	; 0x15
     5d2:	9e 89       	ldd	r25, Y+22	; 0x16
     5d4:	20 e0       	ldi	r18, 0x00	; 0
     5d6:	3f ef       	ldi	r19, 0xFF	; 255
     5d8:	4f e7       	ldi	r20, 0x7F	; 127
     5da:	57 e4       	ldi	r21, 0x47	; 71
     5dc:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     5e0:	18 16       	cp	r1, r24
     5e2:	0c f0       	brlt	.+2      	; 0x5e6 <CharData+0x1d0>
     5e4:	10 e0       	ldi	r17, 0x00	; 0
     5e6:	11 23       	and	r17, r17
     5e8:	61 f1       	breq	.+88     	; 0x642 <CharData+0x22c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ea:	6f 85       	ldd	r22, Y+15	; 0x0f
     5ec:	78 89       	ldd	r23, Y+16	; 0x10
     5ee:	89 89       	ldd	r24, Y+17	; 0x11
     5f0:	9a 89       	ldd	r25, Y+18	; 0x12
     5f2:	20 e0       	ldi	r18, 0x00	; 0
     5f4:	30 e0       	ldi	r19, 0x00	; 0
     5f6:	40 e2       	ldi	r20, 0x20	; 32
     5f8:	51 e4       	ldi	r21, 0x41	; 65
     5fa:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     5fe:	dc 01       	movw	r26, r24
     600:	cb 01       	movw	r24, r22
     602:	bc 01       	movw	r22, r24
     604:	cd 01       	movw	r24, r26
     606:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	98 8f       	std	Y+24, r25	; 0x18
     610:	8f 8b       	std	Y+23, r24	; 0x17
     612:	12 c0       	rjmp	.+36     	; 0x638 <CharData+0x222>
     614:	89 e1       	ldi	r24, 0x19	; 25
     616:	90 e0       	ldi	r25, 0x00	; 0
     618:	9a 8f       	std	Y+26, r25	; 0x1a
     61a:	89 8f       	std	Y+25, r24	; 0x19
     61c:	89 8d       	ldd	r24, Y+25	; 0x19
     61e:	9a 8d       	ldd	r25, Y+26	; 0x1a
     620:	8c 01       	movw	r16, r24
     622:	c8 01       	movw	r24, r16
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <CharData+0x20e>
     628:	8c 01       	movw	r16, r24
     62a:	1a 8f       	std	Y+26, r17	; 0x1a
     62c:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     62e:	8f 89       	ldd	r24, Y+23	; 0x17
     630:	98 8d       	ldd	r25, Y+24	; 0x18
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	98 8f       	std	Y+24, r25	; 0x18
     636:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     638:	8f 89       	ldd	r24, Y+23	; 0x17
     63a:	98 8d       	ldd	r25, Y+24	; 0x18
     63c:	00 97       	sbiw	r24, 0x00	; 0
     63e:	51 f7       	brne	.-44     	; 0x614 <CharData+0x1fe>
     640:	17 c0       	rjmp	.+46     	; 0x670 <CharData+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     642:	6b 89       	ldd	r22, Y+19	; 0x13
     644:	7c 89       	ldd	r23, Y+20	; 0x14
     646:	8d 89       	ldd	r24, Y+21	; 0x15
     648:	9e 89       	ldd	r25, Y+22	; 0x16
     64a:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     64e:	dc 01       	movw	r26, r24
     650:	cb 01       	movw	r24, r22
     652:	98 8f       	std	Y+24, r25	; 0x18
     654:	8f 8b       	std	Y+23, r24	; 0x17
     656:	8f 89       	ldd	r24, Y+23	; 0x17
     658:	98 8d       	ldd	r25, Y+24	; 0x18
     65a:	9c 8f       	std	Y+28, r25	; 0x1c
     65c:	8b 8f       	std	Y+27, r24	; 0x1b
     65e:	8b 8d       	ldd	r24, Y+27	; 0x1b
     660:	9c 8d       	ldd	r25, Y+28	; 0x1c
     662:	8c 01       	movw	r16, r24
     664:	f8 01       	movw	r30, r16
     666:	31 97       	sbiw	r30, 0x01	; 1
     668:	f1 f7       	brne	.-4      	; 0x666 <CharData+0x250>
     66a:	8f 01       	movw	r16, r30
     66c:	1c 8f       	std	Y+28, r17	; 0x1c
     66e:	0b 8f       	std	Y+27, r16	; 0x1b
	_delay_ms(10);							//Small delay for sending the data
	DISABLE;								// Reset control bits
     670:	85 e3       	ldi	r24, 0x35	; 53
     672:	90 e0       	ldi	r25, 0x00	; 0
     674:	25 e3       	ldi	r18, 0x35	; 53
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	f9 01       	movw	r30, r18
     67a:	20 81       	ld	r18, Z
     67c:	2e 7f       	andi	r18, 0xFE	; 254
     67e:	fc 01       	movw	r30, r24
     680:	20 83       	st	Z, r18
	RS_CLEAR;
     682:	85 e3       	ldi	r24, 0x35	; 53
     684:	90 e0       	ldi	r25, 0x00	; 0
     686:	25 e3       	ldi	r18, 0x35	; 53
     688:	30 e0       	ldi	r19, 0x00	; 0
     68a:	f9 01       	movw	r30, r18
     68c:	20 81       	ld	r18, Z
     68e:	2b 7f       	andi	r18, 0xFB	; 251
     690:	fc 01       	movw	r30, r24
     692:	20 83       	st	Z, r18
	return;
	}
     694:	6d 96       	adiw	r28, 0x1d	; 29
     696:	0f b6       	in	r0, 0x3f	; 63
     698:	f8 94       	cli
     69a:	de bf       	out	0x3e, r29	; 62
     69c:	0f be       	out	0x3f, r0	; 63
     69e:	cd bf       	out	0x3d, r28	; 61
     6a0:	cf 91       	pop	r28
     6a2:	df 91       	pop	r29
     6a4:	1f 91       	pop	r17
     6a6:	0f 91       	pop	r16
     6a8:	08 95       	ret

000006aa <StringData>:

void StringData(char *data)
{				                            // 8-bit interface for writing strings
     6aa:	0f 93       	push	r16
     6ac:	1f 93       	push	r17
     6ae:	df 93       	push	r29
     6b0:	cf 93       	push	r28
     6b2:	cd b7       	in	r28, 0x3d	; 61
     6b4:	de b7       	in	r29, 0x3e	; 62
     6b6:	6e 97       	sbiw	r28, 0x1e	; 30
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	f8 94       	cli
     6bc:	de bf       	out	0x3e, r29	; 62
     6be:	0f be       	out	0x3f, r0	; 63
     6c0:	cd bf       	out	0x3d, r28	; 61
     6c2:	9e 8f       	std	Y+30, r25	; 0x1e
     6c4:	8d 8f       	std	Y+29, r24	; 0x1d
    int i;
    while(*data!='\0')
     6c6:	3a c1       	rjmp	.+628    	; 0x93c <__stack+0xdd>
    {
        DATA = *data;		               // Write data to port
     6c8:	82 e3       	ldi	r24, 0x32	; 50
     6ca:	90 e0       	ldi	r25, 0x00	; 0
     6cc:	2d 8d       	ldd	r18, Y+29	; 0x1d
     6ce:	3e 8d       	ldd	r19, Y+30	; 0x1e
     6d0:	f9 01       	movw	r30, r18
     6d2:	20 81       	ld	r18, Z
     6d4:	fc 01       	movw	r30, r24
     6d6:	20 83       	st	Z, r18
        RS_SET;							   // Set control bits
     6d8:	85 e3       	ldi	r24, 0x35	; 53
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	25 e3       	ldi	r18, 0x35	; 53
     6de:	30 e0       	ldi	r19, 0x00	; 0
     6e0:	f9 01       	movw	r30, r18
     6e2:	20 81       	ld	r18, Z
     6e4:	24 60       	ori	r18, 0x04	; 4
     6e6:	fc 01       	movw	r30, r24
     6e8:	20 83       	st	Z, r18
        RW_CLEAR;
     6ea:	85 e3       	ldi	r24, 0x35	; 53
     6ec:	90 e0       	ldi	r25, 0x00	; 0
     6ee:	25 e3       	ldi	r18, 0x35	; 53
     6f0:	30 e0       	ldi	r19, 0x00	; 0
     6f2:	f9 01       	movw	r30, r18
     6f4:	20 81       	ld	r18, Z
     6f6:	2d 7f       	andi	r18, 0xFD	; 253
     6f8:	fc 01       	movw	r30, r24
     6fa:	20 83       	st	Z, r18
     6fc:	80 e0       	ldi	r24, 0x00	; 0
     6fe:	90 e0       	ldi	r25, 0x00	; 0
     700:	a0 e2       	ldi	r26, 0x20	; 32
     702:	b1 e4       	ldi	r27, 0x41	; 65
     704:	89 83       	std	Y+1, r24	; 0x01
     706:	9a 83       	std	Y+2, r25	; 0x02
     708:	ab 83       	std	Y+3, r26	; 0x03
     70a:	bc 83       	std	Y+4, r27	; 0x04
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     70c:	69 81       	ldd	r22, Y+1	; 0x01
     70e:	7a 81       	ldd	r23, Y+2	; 0x02
     710:	8b 81       	ldd	r24, Y+3	; 0x03
     712:	9c 81       	ldd	r25, Y+4	; 0x04
     714:	20 e0       	ldi	r18, 0x00	; 0
     716:	30 e0       	ldi	r19, 0x00	; 0
     718:	4a e7       	ldi	r20, 0x7A	; 122
     71a:	53 e4       	ldi	r21, 0x43	; 67
     71c:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     720:	dc 01       	movw	r26, r24
     722:	cb 01       	movw	r24, r22
     724:	8d 83       	std	Y+5, r24	; 0x05
     726:	9e 83       	std	Y+6, r25	; 0x06
     728:	af 83       	std	Y+7, r26	; 0x07
     72a:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     72c:	11 e0       	ldi	r17, 0x01	; 1
     72e:	6d 81       	ldd	r22, Y+5	; 0x05
     730:	7e 81       	ldd	r23, Y+6	; 0x06
     732:	8f 81       	ldd	r24, Y+7	; 0x07
     734:	98 85       	ldd	r25, Y+8	; 0x08
     736:	20 e0       	ldi	r18, 0x00	; 0
     738:	30 e0       	ldi	r19, 0x00	; 0
     73a:	40 e8       	ldi	r20, 0x80	; 128
     73c:	5f e3       	ldi	r21, 0x3F	; 63
     73e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     742:	88 23       	and	r24, r24
     744:	0c f0       	brlt	.+2      	; 0x748 <StringData+0x9e>
     746:	10 e0       	ldi	r17, 0x00	; 0
     748:	11 23       	and	r17, r17
     74a:	29 f0       	breq	.+10     	; 0x756 <StringData+0xac>
		__ticks = 1;
     74c:	81 e0       	ldi	r24, 0x01	; 1
     74e:	90 e0       	ldi	r25, 0x00	; 0
     750:	9a 87       	std	Y+10, r25	; 0x0a
     752:	89 87       	std	Y+9, r24	; 0x09
     754:	46 c0       	rjmp	.+140    	; 0x7e2 <StringData+0x138>
	else if (__tmp > 65535)
     756:	11 e0       	ldi	r17, 0x01	; 1
     758:	6d 81       	ldd	r22, Y+5	; 0x05
     75a:	7e 81       	ldd	r23, Y+6	; 0x06
     75c:	8f 81       	ldd	r24, Y+7	; 0x07
     75e:	98 85       	ldd	r25, Y+8	; 0x08
     760:	20 e0       	ldi	r18, 0x00	; 0
     762:	3f ef       	ldi	r19, 0xFF	; 255
     764:	4f e7       	ldi	r20, 0x7F	; 127
     766:	57 e4       	ldi	r21, 0x47	; 71
     768:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     76c:	18 16       	cp	r1, r24
     76e:	0c f0       	brlt	.+2      	; 0x772 <StringData+0xc8>
     770:	10 e0       	ldi	r17, 0x00	; 0
     772:	11 23       	and	r17, r17
     774:	61 f1       	breq	.+88     	; 0x7ce <StringData+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     776:	69 81       	ldd	r22, Y+1	; 0x01
     778:	7a 81       	ldd	r23, Y+2	; 0x02
     77a:	8b 81       	ldd	r24, Y+3	; 0x03
     77c:	9c 81       	ldd	r25, Y+4	; 0x04
     77e:	20 e0       	ldi	r18, 0x00	; 0
     780:	30 e0       	ldi	r19, 0x00	; 0
     782:	40 e2       	ldi	r20, 0x20	; 32
     784:	51 e4       	ldi	r21, 0x41	; 65
     786:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     78a:	dc 01       	movw	r26, r24
     78c:	cb 01       	movw	r24, r22
     78e:	bc 01       	movw	r22, r24
     790:	cd 01       	movw	r24, r26
     792:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     796:	dc 01       	movw	r26, r24
     798:	cb 01       	movw	r24, r22
     79a:	9a 87       	std	Y+10, r25	; 0x0a
     79c:	89 87       	std	Y+9, r24	; 0x09
     79e:	12 c0       	rjmp	.+36     	; 0x7c4 <StringData+0x11a>
     7a0:	89 e1       	ldi	r24, 0x19	; 25
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	9c 87       	std	Y+12, r25	; 0x0c
     7a6:	8b 87       	std	Y+11, r24	; 0x0b
     7a8:	8b 85       	ldd	r24, Y+11	; 0x0b
     7aa:	9c 85       	ldd	r25, Y+12	; 0x0c
     7ac:	8c 01       	movw	r16, r24
     7ae:	c8 01       	movw	r24, r16
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <StringData+0x106>
     7b4:	8c 01       	movw	r16, r24
     7b6:	1c 87       	std	Y+12, r17	; 0x0c
     7b8:	0b 87       	std	Y+11, r16	; 0x0b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     7be:	01 97       	sbiw	r24, 0x01	; 1
     7c0:	9a 87       	std	Y+10, r25	; 0x0a
     7c2:	89 87       	std	Y+9, r24	; 0x09
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     7c4:	89 85       	ldd	r24, Y+9	; 0x09
     7c6:	9a 85       	ldd	r25, Y+10	; 0x0a
     7c8:	00 97       	sbiw	r24, 0x00	; 0
     7ca:	51 f7       	brne	.-44     	; 0x7a0 <StringData+0xf6>
     7cc:	17 c0       	rjmp	.+46     	; 0x7fc <StringData+0x152>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     7ce:	6d 81       	ldd	r22, Y+5	; 0x05
     7d0:	7e 81       	ldd	r23, Y+6	; 0x06
     7d2:	8f 81       	ldd	r24, Y+7	; 0x07
     7d4:	98 85       	ldd	r25, Y+8	; 0x08
     7d6:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	9a 87       	std	Y+10, r25	; 0x0a
     7e0:	89 87       	std	Y+9, r24	; 0x09
     7e2:	89 85       	ldd	r24, Y+9	; 0x09
     7e4:	9a 85       	ldd	r25, Y+10	; 0x0a
     7e6:	9e 87       	std	Y+14, r25	; 0x0e
     7e8:	8d 87       	std	Y+13, r24	; 0x0d
     7ea:	8d 85       	ldd	r24, Y+13	; 0x0d
     7ec:	9e 85       	ldd	r25, Y+14	; 0x0e
     7ee:	8c 01       	movw	r16, r24
     7f0:	f8 01       	movw	r30, r16
     7f2:	31 97       	sbiw	r30, 0x01	; 1
     7f4:	f1 f7       	brne	.-4      	; 0x7f2 <StringData+0x148>
     7f6:	8f 01       	movw	r16, r30
     7f8:	1e 87       	std	Y+14, r17	; 0x0e
     7fa:	0d 87       	std	Y+13, r16	; 0x0d
	    _delay_ms(10);
        ENABLE;							   // Clock data into LCD
     7fc:	85 e3       	ldi	r24, 0x35	; 53
     7fe:	90 e0       	ldi	r25, 0x00	; 0
     800:	25 e3       	ldi	r18, 0x35	; 53
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	f9 01       	movw	r30, r18
     806:	20 81       	ld	r18, Z
     808:	21 60       	ori	r18, 0x01	; 1
     80a:	fc 01       	movw	r30, r24
     80c:	20 83       	st	Z, r18
     80e:	80 e0       	ldi	r24, 0x00	; 0
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	a0 e2       	ldi	r26, 0x20	; 32
     814:	b1 e4       	ldi	r27, 0x41	; 65
     816:	8f 87       	std	Y+15, r24	; 0x0f
     818:	98 8b       	std	Y+16, r25	; 0x10
     81a:	a9 8b       	std	Y+17, r26	; 0x11
     81c:	ba 8b       	std	Y+18, r27	; 0x12
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     81e:	6f 85       	ldd	r22, Y+15	; 0x0f
     820:	78 89       	ldd	r23, Y+16	; 0x10
     822:	89 89       	ldd	r24, Y+17	; 0x11
     824:	9a 89       	ldd	r25, Y+18	; 0x12
     826:	20 e0       	ldi	r18, 0x00	; 0
     828:	30 e0       	ldi	r19, 0x00	; 0
     82a:	4a e7       	ldi	r20, 0x7A	; 122
     82c:	53 e4       	ldi	r21, 0x43	; 67
     82e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     832:	dc 01       	movw	r26, r24
     834:	cb 01       	movw	r24, r22
     836:	8b 8b       	std	Y+19, r24	; 0x13
     838:	9c 8b       	std	Y+20, r25	; 0x14
     83a:	ad 8b       	std	Y+21, r26	; 0x15
     83c:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     83e:	11 e0       	ldi	r17, 0x01	; 1
     840:	6b 89       	ldd	r22, Y+19	; 0x13
     842:	7c 89       	ldd	r23, Y+20	; 0x14
     844:	8d 89       	ldd	r24, Y+21	; 0x15
     846:	9e 89       	ldd	r25, Y+22	; 0x16
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	40 e8       	ldi	r20, 0x80	; 128
     84e:	5f e3       	ldi	r21, 0x3F	; 63
     850:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     854:	88 23       	and	r24, r24
     856:	0c f0       	brlt	.+2      	; 0x85a <StringData+0x1b0>
     858:	10 e0       	ldi	r17, 0x00	; 0
     85a:	11 23       	and	r17, r17
     85c:	29 f0       	breq	.+10     	; 0x868 <__stack+0x9>
		__ticks = 1;
     85e:	81 e0       	ldi	r24, 0x01	; 1
     860:	90 e0       	ldi	r25, 0x00	; 0
     862:	98 8f       	std	Y+24, r25	; 0x18
     864:	8f 8b       	std	Y+23, r24	; 0x17
     866:	46 c0       	rjmp	.+140    	; 0x8f4 <__stack+0x95>
	else if (__tmp > 65535)
     868:	11 e0       	ldi	r17, 0x01	; 1
     86a:	6b 89       	ldd	r22, Y+19	; 0x13
     86c:	7c 89       	ldd	r23, Y+20	; 0x14
     86e:	8d 89       	ldd	r24, Y+21	; 0x15
     870:	9e 89       	ldd	r25, Y+22	; 0x16
     872:	20 e0       	ldi	r18, 0x00	; 0
     874:	3f ef       	ldi	r19, 0xFF	; 255
     876:	4f e7       	ldi	r20, 0x7F	; 127
     878:	57 e4       	ldi	r21, 0x47	; 71
     87a:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     87e:	18 16       	cp	r1, r24
     880:	0c f0       	brlt	.+2      	; 0x884 <__stack+0x25>
     882:	10 e0       	ldi	r17, 0x00	; 0
     884:	11 23       	and	r17, r17
     886:	61 f1       	breq	.+88     	; 0x8e0 <__stack+0x81>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     888:	6f 85       	ldd	r22, Y+15	; 0x0f
     88a:	78 89       	ldd	r23, Y+16	; 0x10
     88c:	89 89       	ldd	r24, Y+17	; 0x11
     88e:	9a 89       	ldd	r25, Y+18	; 0x12
     890:	20 e0       	ldi	r18, 0x00	; 0
     892:	30 e0       	ldi	r19, 0x00	; 0
     894:	40 e2       	ldi	r20, 0x20	; 32
     896:	51 e4       	ldi	r21, 0x41	; 65
     898:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     89c:	dc 01       	movw	r26, r24
     89e:	cb 01       	movw	r24, r22
     8a0:	bc 01       	movw	r22, r24
     8a2:	cd 01       	movw	r24, r26
     8a4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     8a8:	dc 01       	movw	r26, r24
     8aa:	cb 01       	movw	r24, r22
     8ac:	98 8f       	std	Y+24, r25	; 0x18
     8ae:	8f 8b       	std	Y+23, r24	; 0x17
     8b0:	12 c0       	rjmp	.+36     	; 0x8d6 <__stack+0x77>
     8b2:	89 e1       	ldi	r24, 0x19	; 25
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	9a 8f       	std	Y+26, r25	; 0x1a
     8b8:	89 8f       	std	Y+25, r24	; 0x19
     8ba:	89 8d       	ldd	r24, Y+25	; 0x19
     8bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
     8be:	8c 01       	movw	r16, r24
     8c0:	c8 01       	movw	r24, r16
     8c2:	01 97       	sbiw	r24, 0x01	; 1
     8c4:	f1 f7       	brne	.-4      	; 0x8c2 <__stack+0x63>
     8c6:	8c 01       	movw	r16, r24
     8c8:	1a 8f       	std	Y+26, r17	; 0x1a
     8ca:	09 8f       	std	Y+25, r16	; 0x19
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8cc:	8f 89       	ldd	r24, Y+23	; 0x17
     8ce:	98 8d       	ldd	r25, Y+24	; 0x18
     8d0:	01 97       	sbiw	r24, 0x01	; 1
     8d2:	98 8f       	std	Y+24, r25	; 0x18
     8d4:	8f 8b       	std	Y+23, r24	; 0x17
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8d6:	8f 89       	ldd	r24, Y+23	; 0x17
     8d8:	98 8d       	ldd	r25, Y+24	; 0x18
     8da:	00 97       	sbiw	r24, 0x00	; 0
     8dc:	51 f7       	brne	.-44     	; 0x8b2 <__stack+0x53>
     8de:	17 c0       	rjmp	.+46     	; 0x90e <__stack+0xaf>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8e0:	6b 89       	ldd	r22, Y+19	; 0x13
     8e2:	7c 89       	ldd	r23, Y+20	; 0x14
     8e4:	8d 89       	ldd	r24, Y+21	; 0x15
     8e6:	9e 89       	ldd	r25, Y+22	; 0x16
     8e8:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     8ec:	dc 01       	movw	r26, r24
     8ee:	cb 01       	movw	r24, r22
     8f0:	98 8f       	std	Y+24, r25	; 0x18
     8f2:	8f 8b       	std	Y+23, r24	; 0x17
     8f4:	8f 89       	ldd	r24, Y+23	; 0x17
     8f6:	98 8d       	ldd	r25, Y+24	; 0x18
     8f8:	9c 8f       	std	Y+28, r25	; 0x1c
     8fa:	8b 8f       	std	Y+27, r24	; 0x1b
     8fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
     8fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
     900:	8c 01       	movw	r16, r24
     902:	f8 01       	movw	r30, r16
     904:	31 97       	sbiw	r30, 0x01	; 1
     906:	f1 f7       	brne	.-4      	; 0x904 <__stack+0xa5>
     908:	8f 01       	movw	r16, r30
     90a:	1c 8f       	std	Y+28, r17	; 0x1c
     90c:	0b 8f       	std	Y+27, r16	; 0x1b
        _delay_ms(10);					   //Small delay for sending the data
        DISABLE;						   // Reset control bits
     90e:	85 e3       	ldi	r24, 0x35	; 53
     910:	90 e0       	ldi	r25, 0x00	; 0
     912:	25 e3       	ldi	r18, 0x35	; 53
     914:	30 e0       	ldi	r19, 0x00	; 0
     916:	f9 01       	movw	r30, r18
     918:	20 81       	ld	r18, Z
     91a:	2e 7f       	andi	r18, 0xFE	; 254
     91c:	fc 01       	movw	r30, r24
     91e:	20 83       	st	Z, r18
        RS_CLEAR;  
     920:	85 e3       	ldi	r24, 0x35	; 53
     922:	90 e0       	ldi	r25, 0x00	; 0
     924:	25 e3       	ldi	r18, 0x35	; 53
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	f9 01       	movw	r30, r18
     92a:	20 81       	ld	r18, Z
     92c:	2b 7f       	andi	r18, 0xFB	; 251
     92e:	fc 01       	movw	r30, r24
     930:	20 83       	st	Z, r18
        data++;                         
     932:	8d 8d       	ldd	r24, Y+29	; 0x1d
     934:	9e 8d       	ldd	r25, Y+30	; 0x1e
     936:	01 96       	adiw	r24, 0x01	; 1
     938:	9e 8f       	std	Y+30, r25	; 0x1e
     93a:	8d 8f       	std	Y+29, r24	; 0x1d
	}

void StringData(char *data)
{				                            // 8-bit interface for writing strings
    int i;
    while(*data!='\0')
     93c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     93e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     940:	fc 01       	movw	r30, r24
     942:	80 81       	ld	r24, Z
     944:	88 23       	and	r24, r24
     946:	09 f0       	breq	.+2      	; 0x94a <__stack+0xeb>
     948:	bf ce       	rjmp	.-642    	; 0x6c8 <StringData+0x1e>
        DISABLE;						   // Reset control bits
        RS_CLEAR;  
        data++;                         
    }
    return;
}
     94a:	6e 96       	adiw	r28, 0x1e	; 30
     94c:	0f b6       	in	r0, 0x3f	; 63
     94e:	f8 94       	cli
     950:	de bf       	out	0x3e, r29	; 62
     952:	0f be       	out	0x3f, r0	; 63
     954:	cd bf       	out	0x3d, r28	; 61
     956:	cf 91       	pop	r28
     958:	df 91       	pop	r29
     95a:	1f 91       	pop	r17
     95c:	0f 91       	pop	r16
     95e:	08 95       	ret

00000960 <lcd_init>:

void lcd_init()
{
     960:	df 93       	push	r29
     962:	cf 93       	push	r28
     964:	cd b7       	in	r28, 0x3d	; 61
     966:	de b7       	in	r29, 0x3e	; 62
	DATADIR = 0xFF;			//OUTPUT MODE
     968:	81 e3       	ldi	r24, 0x31	; 49
     96a:	90 e0       	ldi	r25, 0x00	; 0
     96c:	2f ef       	ldi	r18, 0xFF	; 255
     96e:	fc 01       	movw	r30, r24
     970:	20 83       	st	Z, r18
	CONTROLDIR = 0xFF;		//OUTPUT MODE
     972:	84 e3       	ldi	r24, 0x34	; 52
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	2f ef       	ldi	r18, 0xFF	; 255
     978:	fc 01       	movw	r30, r24
     97a:	20 83       	st	Z, r18

	CMD(0x80);
     97c:	80 e8       	ldi	r24, 0x80	; 128
     97e:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	CMD(0x38);
     982:	88 e3       	ldi	r24, 0x38	; 56
     984:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	CMD(0x01);
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	CMD(0x0E);
     98e:	8e e0       	ldi	r24, 0x0E	; 14
     990:	0e 94 41 00 	call	0x82	; 0x82 <CMD>

}
     994:	cf 91       	pop	r28
     996:	df 91       	pop	r29
     998:	08 95       	ret

0000099a <key>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"

char key()
{
     99a:	0f 93       	push	r16
     99c:	1f 93       	push	r17
     99e:	df 93       	push	r29
     9a0:	cf 93       	push	r28
     9a2:	cd b7       	in	r28, 0x3d	; 61
     9a4:	de b7       	in	r29, 0x3e	; 62
     9a6:	e9 97       	sbiw	r28, 0x39	; 57
     9a8:	0f b6       	in	r0, 0x3f	; 63
     9aa:	f8 94       	cli
     9ac:	de bf       	out	0x3e, r29	; 62
     9ae:	0f be       	out	0x3f, r0	; 63
     9b0:	cd bf       	out	0x3d, r28	; 61
        char a;
        PORTA = 0X0E;
     9b2:	8b e3       	ldi	r24, 0x3B	; 59
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	2e e0       	ldi	r18, 0x0E	; 14
     9b8:	fc 01       	movw	r30, r24
     9ba:	20 83       	st	Z, r18
        a = PINA & 0XF0;
     9bc:	89 e3       	ldi	r24, 0x39	; 57
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	fc 01       	movw	r30, r24
     9c2:	80 81       	ld	r24, Z
     9c4:	80 7f       	andi	r24, 0xF0	; 240
     9c6:	89 83       	std	Y+1, r24	; 0x01
		if((PORTA&0x0F) == 0x0E){
     9c8:	8b e3       	ldi	r24, 0x3B	; 59
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	fc 01       	movw	r30, r24
     9ce:	80 81       	ld	r24, Z
     9d0:	88 2f       	mov	r24, r24
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	8f 70       	andi	r24, 0x0F	; 15
     9d6:	90 70       	andi	r25, 0x00	; 0
     9d8:	8e 30       	cpi	r24, 0x0E	; 14
     9da:	91 05       	cpc	r25, r1
     9dc:	09 f0       	breq	.+2      	; 0x9e0 <key+0x46>
     9de:	5c c0       	rjmp	.+184    	; 0xa98 <key+0xfe>
        switch(a)
     9e0:	89 81       	ldd	r24, Y+1	; 0x01
     9e2:	88 2f       	mov	r24, r24
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	80 3b       	cpi	r24, 0xB0	; 176
     9e8:	91 05       	cpc	r25, r1
     9ea:	01 f1       	breq	.+64     	; 0xa2c <key+0x92>
     9ec:	81 3b       	cpi	r24, 0xB1	; 177
     9ee:	91 05       	cpc	r25, r1
     9f0:	24 f4       	brge	.+8      	; 0x9fa <key+0x60>
     9f2:	80 37       	cpi	r24, 0x70	; 112
     9f4:	91 05       	cpc	r25, r1
     9f6:	41 f0       	breq	.+16     	; 0xa08 <key+0x6e>
     9f8:	4f c0       	rjmp	.+158    	; 0xa98 <key+0xfe>
     9fa:	80 3d       	cpi	r24, 0xD0	; 208
     9fc:	91 05       	cpc	r25, r1
     9fe:	41 f1       	breq	.+80     	; 0xa50 <key+0xb6>
     a00:	80 3e       	cpi	r24, 0xE0	; 224
     a02:	91 05       	cpc	r25, r1
     a04:	b9 f1       	breq	.+110    	; 0xa74 <key+0xda>
     a06:	48 c0       	rjmp	.+144    	; 0xa98 <key+0xfe>
        {
            case 0X70: while((PINA & 0XF0) == a);
     a08:	00 00       	nop
     a0a:	89 e3       	ldi	r24, 0x39	; 57
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	fc 01       	movw	r30, r24
     a10:	80 81       	ld	r24, Z
     a12:	88 2f       	mov	r24, r24
     a14:	90 e0       	ldi	r25, 0x00	; 0
     a16:	9c 01       	movw	r18, r24
     a18:	20 7f       	andi	r18, 0xF0	; 240
     a1a:	30 70       	andi	r19, 0x00	; 0
     a1c:	89 81       	ldd	r24, Y+1	; 0x01
     a1e:	88 2f       	mov	r24, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	28 17       	cp	r18, r24
     a24:	39 07       	cpc	r19, r25
     a26:	89 f3       	breq	.-30     	; 0xa0a <key+0x70>
						return('*');
     a28:	8a e2       	ldi	r24, 0x2A	; 42
     a2a:	90 c3       	rjmp	.+1824   	; 0x114c <key+0x7b2>
            case 0XB0: while((PINA & 0XF0) == a);
     a2c:	00 00       	nop
     a2e:	89 e3       	ldi	r24, 0x39	; 57
     a30:	90 e0       	ldi	r25, 0x00	; 0
     a32:	fc 01       	movw	r30, r24
     a34:	80 81       	ld	r24, Z
     a36:	88 2f       	mov	r24, r24
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	9c 01       	movw	r18, r24
     a3c:	20 7f       	andi	r18, 0xF0	; 240
     a3e:	30 70       	andi	r19, 0x00	; 0
     a40:	89 81       	ldd	r24, Y+1	; 0x01
     a42:	88 2f       	mov	r24, r24
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	28 17       	cp	r18, r24
     a48:	39 07       	cpc	r19, r25
     a4a:	89 f3       	breq	.-30     	; 0xa2e <key+0x94>
						return('0');
     a4c:	80 e3       	ldi	r24, 0x30	; 48
     a4e:	7e c3       	rjmp	.+1788   	; 0x114c <key+0x7b2>
            case 0XD0: while((PINA & 0XF0) == a);
     a50:	00 00       	nop
     a52:	89 e3       	ldi	r24, 0x39	; 57
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	fc 01       	movw	r30, r24
     a58:	80 81       	ld	r24, Z
     a5a:	88 2f       	mov	r24, r24
     a5c:	90 e0       	ldi	r25, 0x00	; 0
     a5e:	9c 01       	movw	r18, r24
     a60:	20 7f       	andi	r18, 0xF0	; 240
     a62:	30 70       	andi	r19, 0x00	; 0
     a64:	89 81       	ldd	r24, Y+1	; 0x01
     a66:	88 2f       	mov	r24, r24
     a68:	90 e0       	ldi	r25, 0x00	; 0
     a6a:	28 17       	cp	r18, r24
     a6c:	39 07       	cpc	r19, r25
     a6e:	89 f3       	breq	.-30     	; 0xa52 <key+0xb8>
						return('#');
     a70:	83 e2       	ldi	r24, 0x23	; 35
     a72:	6c c3       	rjmp	.+1752   	; 0x114c <key+0x7b2>
            case 0XE0: while((PINA & 0XF0) == a);
     a74:	00 00       	nop
     a76:	89 e3       	ldi	r24, 0x39	; 57
     a78:	90 e0       	ldi	r25, 0x00	; 0
     a7a:	fc 01       	movw	r30, r24
     a7c:	80 81       	ld	r24, Z
     a7e:	88 2f       	mov	r24, r24
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	9c 01       	movw	r18, r24
     a84:	20 7f       	andi	r18, 0xF0	; 240
     a86:	30 70       	andi	r19, 0x00	; 0
     a88:	89 81       	ldd	r24, Y+1	; 0x01
     a8a:	88 2f       	mov	r24, r24
     a8c:	90 e0       	ldi	r25, 0x00	; 0
     a8e:	28 17       	cp	r18, r24
     a90:	39 07       	cpc	r19, r25
     a92:	89 f3       	breq	.-30     	; 0xa76 <key+0xdc>
						return('D');
     a94:	84 e4       	ldi	r24, 0x44	; 68
     a96:	5a c3       	rjmp	.+1716   	; 0x114c <key+0x7b2>
     a98:	80 e0       	ldi	r24, 0x00	; 0
     a9a:	90 e0       	ldi	r25, 0x00	; 0
     a9c:	a0 e2       	ldi	r26, 0x20	; 32
     a9e:	b1 e4       	ldi	r27, 0x41	; 65
     aa0:	8a 83       	std	Y+2, r24	; 0x02
     aa2:	9b 83       	std	Y+3, r25	; 0x03
     aa4:	ac 83       	std	Y+4, r26	; 0x04
     aa6:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     aa8:	6a 81       	ldd	r22, Y+2	; 0x02
     aaa:	7b 81       	ldd	r23, Y+3	; 0x03
     aac:	8c 81       	ldd	r24, Y+4	; 0x04
     aae:	9d 81       	ldd	r25, Y+5	; 0x05
     ab0:	20 e0       	ldi	r18, 0x00	; 0
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	4a e7       	ldi	r20, 0x7A	; 122
     ab6:	53 e4       	ldi	r21, 0x43	; 67
     ab8:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     abc:	dc 01       	movw	r26, r24
     abe:	cb 01       	movw	r24, r22
     ac0:	8e 83       	std	Y+6, r24	; 0x06
     ac2:	9f 83       	std	Y+7, r25	; 0x07
     ac4:	a8 87       	std	Y+8, r26	; 0x08
     ac6:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
     ac8:	11 e0       	ldi	r17, 0x01	; 1
     aca:	6e 81       	ldd	r22, Y+6	; 0x06
     acc:	7f 81       	ldd	r23, Y+7	; 0x07
     ace:	88 85       	ldd	r24, Y+8	; 0x08
     ad0:	99 85       	ldd	r25, Y+9	; 0x09
     ad2:	20 e0       	ldi	r18, 0x00	; 0
     ad4:	30 e0       	ldi	r19, 0x00	; 0
     ad6:	40 e8       	ldi	r20, 0x80	; 128
     ad8:	5f e3       	ldi	r21, 0x3F	; 63
     ada:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     ade:	88 23       	and	r24, r24
     ae0:	0c f0       	brlt	.+2      	; 0xae4 <key+0x14a>
     ae2:	10 e0       	ldi	r17, 0x00	; 0
     ae4:	11 23       	and	r17, r17
     ae6:	29 f0       	breq	.+10     	; 0xaf2 <key+0x158>
		__ticks = 1;
     ae8:	81 e0       	ldi	r24, 0x01	; 1
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	9b 87       	std	Y+11, r25	; 0x0b
     aee:	8a 87       	std	Y+10, r24	; 0x0a
     af0:	46 c0       	rjmp	.+140    	; 0xb7e <key+0x1e4>
	else if (__tmp > 65535)
     af2:	11 e0       	ldi	r17, 0x01	; 1
     af4:	6e 81       	ldd	r22, Y+6	; 0x06
     af6:	7f 81       	ldd	r23, Y+7	; 0x07
     af8:	88 85       	ldd	r24, Y+8	; 0x08
     afa:	99 85       	ldd	r25, Y+9	; 0x09
     afc:	20 e0       	ldi	r18, 0x00	; 0
     afe:	3f ef       	ldi	r19, 0xFF	; 255
     b00:	4f e7       	ldi	r20, 0x7F	; 127
     b02:	57 e4       	ldi	r21, 0x47	; 71
     b04:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     b08:	18 16       	cp	r1, r24
     b0a:	0c f0       	brlt	.+2      	; 0xb0e <key+0x174>
     b0c:	10 e0       	ldi	r17, 0x00	; 0
     b0e:	11 23       	and	r17, r17
     b10:	61 f1       	breq	.+88     	; 0xb6a <key+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b12:	6a 81       	ldd	r22, Y+2	; 0x02
     b14:	7b 81       	ldd	r23, Y+3	; 0x03
     b16:	8c 81       	ldd	r24, Y+4	; 0x04
     b18:	9d 81       	ldd	r25, Y+5	; 0x05
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	40 e2       	ldi	r20, 0x20	; 32
     b20:	51 e4       	ldi	r21, 0x41	; 65
     b22:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     b26:	dc 01       	movw	r26, r24
     b28:	cb 01       	movw	r24, r22
     b2a:	bc 01       	movw	r22, r24
     b2c:	cd 01       	movw	r24, r26
     b2e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     b32:	dc 01       	movw	r26, r24
     b34:	cb 01       	movw	r24, r22
     b36:	9b 87       	std	Y+11, r25	; 0x0b
     b38:	8a 87       	std	Y+10, r24	; 0x0a
     b3a:	12 c0       	rjmp	.+36     	; 0xb60 <key+0x1c6>
     b3c:	89 e1       	ldi	r24, 0x19	; 25
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	9d 87       	std	Y+13, r25	; 0x0d
     b42:	8c 87       	std	Y+12, r24	; 0x0c
     b44:	8c 85       	ldd	r24, Y+12	; 0x0c
     b46:	9d 85       	ldd	r25, Y+13	; 0x0d
     b48:	8c 01       	movw	r16, r24
     b4a:	c8 01       	movw	r24, r16
     b4c:	01 97       	sbiw	r24, 0x01	; 1
     b4e:	f1 f7       	brne	.-4      	; 0xb4c <key+0x1b2>
     b50:	8c 01       	movw	r16, r24
     b52:	1d 87       	std	Y+13, r17	; 0x0d
     b54:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b56:	8a 85       	ldd	r24, Y+10	; 0x0a
     b58:	9b 85       	ldd	r25, Y+11	; 0x0b
     b5a:	01 97       	sbiw	r24, 0x01	; 1
     b5c:	9b 87       	std	Y+11, r25	; 0x0b
     b5e:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b60:	8a 85       	ldd	r24, Y+10	; 0x0a
     b62:	9b 85       	ldd	r25, Y+11	; 0x0b
     b64:	00 97       	sbiw	r24, 0x00	; 0
     b66:	51 f7       	brne	.-44     	; 0xb3c <key+0x1a2>
     b68:	17 c0       	rjmp	.+46     	; 0xb98 <key+0x1fe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b6a:	6e 81       	ldd	r22, Y+6	; 0x06
     b6c:	7f 81       	ldd	r23, Y+7	; 0x07
     b6e:	88 85       	ldd	r24, Y+8	; 0x08
     b70:	99 85       	ldd	r25, Y+9	; 0x09
     b72:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     b76:	dc 01       	movw	r26, r24
     b78:	cb 01       	movw	r24, r22
     b7a:	9b 87       	std	Y+11, r25	; 0x0b
     b7c:	8a 87       	std	Y+10, r24	; 0x0a
     b7e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b80:	9b 85       	ldd	r25, Y+11	; 0x0b
     b82:	9f 87       	std	Y+15, r25	; 0x0f
     b84:	8e 87       	std	Y+14, r24	; 0x0e
     b86:	8e 85       	ldd	r24, Y+14	; 0x0e
     b88:	9f 85       	ldd	r25, Y+15	; 0x0f
     b8a:	8c 01       	movw	r16, r24
     b8c:	f8 01       	movw	r30, r16
     b8e:	31 97       	sbiw	r30, 0x01	; 1
     b90:	f1 f7       	brne	.-4      	; 0xb8e <key+0x1f4>
     b92:	8f 01       	movw	r16, r30
     b94:	1f 87       	std	Y+15, r17	; 0x0f
     b96:	0e 87       	std	Y+14, r16	; 0x0e
        }
		}		
       _delay_ms(10);
       
        PORTA = 0X07;
     b98:	8b e3       	ldi	r24, 0x3B	; 59
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	27 e0       	ldi	r18, 0x07	; 7
     b9e:	fc 01       	movw	r30, r24
     ba0:	20 83       	st	Z, r18
        a = PINA & 0XF0;
     ba2:	89 e3       	ldi	r24, 0x39	; 57
     ba4:	90 e0       	ldi	r25, 0x00	; 0
     ba6:	fc 01       	movw	r30, r24
     ba8:	80 81       	ld	r24, Z
     baa:	80 7f       	andi	r24, 0xF0	; 240
     bac:	89 83       	std	Y+1, r24	; 0x01
 		if((PORTA&0x0F) == 0x07){
     bae:	8b e3       	ldi	r24, 0x3B	; 59
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	fc 01       	movw	r30, r24
     bb4:	80 81       	ld	r24, Z
     bb6:	88 2f       	mov	r24, r24
     bb8:	90 e0       	ldi	r25, 0x00	; 0
     bba:	8f 70       	andi	r24, 0x0F	; 15
     bbc:	90 70       	andi	r25, 0x00	; 0
     bbe:	87 30       	cpi	r24, 0x07	; 7
     bc0:	91 05       	cpc	r25, r1
     bc2:	09 f0       	breq	.+2      	; 0xbc6 <key+0x22c>
     bc4:	5c c0       	rjmp	.+184    	; 0xc7e <key+0x2e4>
       switch(a)
     bc6:	89 81       	ldd	r24, Y+1	; 0x01
     bc8:	88 2f       	mov	r24, r24
     bca:	90 e0       	ldi	r25, 0x00	; 0
     bcc:	80 3b       	cpi	r24, 0xB0	; 176
     bce:	91 05       	cpc	r25, r1
     bd0:	01 f1       	breq	.+64     	; 0xc12 <key+0x278>
     bd2:	81 3b       	cpi	r24, 0xB1	; 177
     bd4:	91 05       	cpc	r25, r1
     bd6:	24 f4       	brge	.+8      	; 0xbe0 <key+0x246>
     bd8:	80 37       	cpi	r24, 0x70	; 112
     bda:	91 05       	cpc	r25, r1
     bdc:	41 f0       	breq	.+16     	; 0xbee <key+0x254>
     bde:	4f c0       	rjmp	.+158    	; 0xc7e <key+0x2e4>
     be0:	80 3d       	cpi	r24, 0xD0	; 208
     be2:	91 05       	cpc	r25, r1
     be4:	41 f1       	breq	.+80     	; 0xc36 <key+0x29c>
     be6:	80 3e       	cpi	r24, 0xE0	; 224
     be8:	91 05       	cpc	r25, r1
     bea:	b9 f1       	breq	.+110    	; 0xc5a <key+0x2c0>
     bec:	48 c0       	rjmp	.+144    	; 0xc7e <key+0x2e4>
        {
            case 0X70: while((PINA & 0XF0) == a);
     bee:	00 00       	nop
     bf0:	89 e3       	ldi	r24, 0x39	; 57
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	fc 01       	movw	r30, r24
     bf6:	80 81       	ld	r24, Z
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	9c 01       	movw	r18, r24
     bfe:	20 7f       	andi	r18, 0xF0	; 240
     c00:	30 70       	andi	r19, 0x00	; 0
     c02:	89 81       	ldd	r24, Y+1	; 0x01
     c04:	88 2f       	mov	r24, r24
     c06:	90 e0       	ldi	r25, 0x00	; 0
     c08:	28 17       	cp	r18, r24
     c0a:	39 07       	cpc	r19, r25
     c0c:	89 f3       	breq	.-30     	; 0xbf0 <key+0x256>
						return('1');
     c0e:	81 e3       	ldi	r24, 0x31	; 49
     c10:	9d c2       	rjmp	.+1338   	; 0x114c <key+0x7b2>
            case 0XB0: while((PINA & 0XF0) == a);
     c12:	00 00       	nop
     c14:	89 e3       	ldi	r24, 0x39	; 57
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	fc 01       	movw	r30, r24
     c1a:	80 81       	ld	r24, Z
     c1c:	88 2f       	mov	r24, r24
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	9c 01       	movw	r18, r24
     c22:	20 7f       	andi	r18, 0xF0	; 240
     c24:	30 70       	andi	r19, 0x00	; 0
     c26:	89 81       	ldd	r24, Y+1	; 0x01
     c28:	88 2f       	mov	r24, r24
     c2a:	90 e0       	ldi	r25, 0x00	; 0
     c2c:	28 17       	cp	r18, r24
     c2e:	39 07       	cpc	r19, r25
     c30:	89 f3       	breq	.-30     	; 0xc14 <key+0x27a>
						return('2');
     c32:	82 e3       	ldi	r24, 0x32	; 50
     c34:	8b c2       	rjmp	.+1302   	; 0x114c <key+0x7b2>
            case 0XD0: while((PINA & 0XF0) == a);
     c36:	00 00       	nop
     c38:	89 e3       	ldi	r24, 0x39	; 57
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	fc 01       	movw	r30, r24
     c3e:	80 81       	ld	r24, Z
     c40:	88 2f       	mov	r24, r24
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	9c 01       	movw	r18, r24
     c46:	20 7f       	andi	r18, 0xF0	; 240
     c48:	30 70       	andi	r19, 0x00	; 0
     c4a:	89 81       	ldd	r24, Y+1	; 0x01
     c4c:	88 2f       	mov	r24, r24
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	89 f3       	breq	.-30     	; 0xc38 <key+0x29e>
						return('3');
     c56:	83 e3       	ldi	r24, 0x33	; 51
     c58:	79 c2       	rjmp	.+1266   	; 0x114c <key+0x7b2>
            case 0XE0: while((PINA & 0XF0) == a);
     c5a:	00 00       	nop
     c5c:	89 e3       	ldi	r24, 0x39	; 57
     c5e:	90 e0       	ldi	r25, 0x00	; 0
     c60:	fc 01       	movw	r30, r24
     c62:	80 81       	ld	r24, Z
     c64:	88 2f       	mov	r24, r24
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9c 01       	movw	r18, r24
     c6a:	20 7f       	andi	r18, 0xF0	; 240
     c6c:	30 70       	andi	r19, 0x00	; 0
     c6e:	89 81       	ldd	r24, Y+1	; 0x01
     c70:	88 2f       	mov	r24, r24
     c72:	90 e0       	ldi	r25, 0x00	; 0
     c74:	28 17       	cp	r18, r24
     c76:	39 07       	cpc	r19, r25
     c78:	89 f3       	breq	.-30     	; 0xc5c <key+0x2c2>
						return('A');
     c7a:	81 e4       	ldi	r24, 0x41	; 65
     c7c:	67 c2       	rjmp	.+1230   	; 0x114c <key+0x7b2>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	90 e0       	ldi	r25, 0x00	; 0
     c82:	a0 e2       	ldi	r26, 0x20	; 32
     c84:	b1 e4       	ldi	r27, 0x41	; 65
     c86:	88 8b       	std	Y+16, r24	; 0x10
     c88:	99 8b       	std	Y+17, r25	; 0x11
     c8a:	aa 8b       	std	Y+18, r26	; 0x12
     c8c:	bb 8b       	std	Y+19, r27	; 0x13
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     c8e:	68 89       	ldd	r22, Y+16	; 0x10
     c90:	79 89       	ldd	r23, Y+17	; 0x11
     c92:	8a 89       	ldd	r24, Y+18	; 0x12
     c94:	9b 89       	ldd	r25, Y+19	; 0x13
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	30 e0       	ldi	r19, 0x00	; 0
     c9a:	4a e7       	ldi	r20, 0x7A	; 122
     c9c:	53 e4       	ldi	r21, 0x43	; 67
     c9e:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     ca2:	dc 01       	movw	r26, r24
     ca4:	cb 01       	movw	r24, r22
     ca6:	8c 8b       	std	Y+20, r24	; 0x14
     ca8:	9d 8b       	std	Y+21, r25	; 0x15
     caa:	ae 8b       	std	Y+22, r26	; 0x16
     cac:	bf 8b       	std	Y+23, r27	; 0x17
	if (__tmp < 1.0)
     cae:	11 e0       	ldi	r17, 0x01	; 1
     cb0:	6c 89       	ldd	r22, Y+20	; 0x14
     cb2:	7d 89       	ldd	r23, Y+21	; 0x15
     cb4:	8e 89       	ldd	r24, Y+22	; 0x16
     cb6:	9f 89       	ldd	r25, Y+23	; 0x17
     cb8:	20 e0       	ldi	r18, 0x00	; 0
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	40 e8       	ldi	r20, 0x80	; 128
     cbe:	5f e3       	ldi	r21, 0x3F	; 63
     cc0:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     cc4:	88 23       	and	r24, r24
     cc6:	0c f0       	brlt	.+2      	; 0xcca <key+0x330>
     cc8:	10 e0       	ldi	r17, 0x00	; 0
     cca:	11 23       	and	r17, r17
     ccc:	29 f0       	breq	.+10     	; 0xcd8 <key+0x33e>
		__ticks = 1;
     cce:	81 e0       	ldi	r24, 0x01	; 1
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	99 8f       	std	Y+25, r25	; 0x19
     cd4:	88 8f       	std	Y+24, r24	; 0x18
     cd6:	46 c0       	rjmp	.+140    	; 0xd64 <key+0x3ca>
	else if (__tmp > 65535)
     cd8:	11 e0       	ldi	r17, 0x01	; 1
     cda:	6c 89       	ldd	r22, Y+20	; 0x14
     cdc:	7d 89       	ldd	r23, Y+21	; 0x15
     cde:	8e 89       	ldd	r24, Y+22	; 0x16
     ce0:	9f 89       	ldd	r25, Y+23	; 0x17
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	3f ef       	ldi	r19, 0xFF	; 255
     ce6:	4f e7       	ldi	r20, 0x7F	; 127
     ce8:	57 e4       	ldi	r21, 0x47	; 71
     cea:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     cee:	18 16       	cp	r1, r24
     cf0:	0c f0       	brlt	.+2      	; 0xcf4 <key+0x35a>
     cf2:	10 e0       	ldi	r17, 0x00	; 0
     cf4:	11 23       	and	r17, r17
     cf6:	61 f1       	breq	.+88     	; 0xd50 <key+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cf8:	68 89       	ldd	r22, Y+16	; 0x10
     cfa:	79 89       	ldd	r23, Y+17	; 0x11
     cfc:	8a 89       	ldd	r24, Y+18	; 0x12
     cfe:	9b 89       	ldd	r25, Y+19	; 0x13
     d00:	20 e0       	ldi	r18, 0x00	; 0
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	40 e2       	ldi	r20, 0x20	; 32
     d06:	51 e4       	ldi	r21, 0x41	; 65
     d08:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     d0c:	dc 01       	movw	r26, r24
     d0e:	cb 01       	movw	r24, r22
     d10:	bc 01       	movw	r22, r24
     d12:	cd 01       	movw	r24, r26
     d14:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	99 8f       	std	Y+25, r25	; 0x19
     d1e:	88 8f       	std	Y+24, r24	; 0x18
     d20:	12 c0       	rjmp	.+36     	; 0xd46 <key+0x3ac>
     d22:	89 e1       	ldi	r24, 0x19	; 25
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	9b 8f       	std	Y+27, r25	; 0x1b
     d28:	8a 8f       	std	Y+26, r24	; 0x1a
     d2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     d2c:	9b 8d       	ldd	r25, Y+27	; 0x1b
     d2e:	8c 01       	movw	r16, r24
     d30:	c8 01       	movw	r24, r16
     d32:	01 97       	sbiw	r24, 0x01	; 1
     d34:	f1 f7       	brne	.-4      	; 0xd32 <key+0x398>
     d36:	8c 01       	movw	r16, r24
     d38:	1b 8f       	std	Y+27, r17	; 0x1b
     d3a:	0a 8f       	std	Y+26, r16	; 0x1a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d3c:	88 8d       	ldd	r24, Y+24	; 0x18
     d3e:	99 8d       	ldd	r25, Y+25	; 0x19
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	99 8f       	std	Y+25, r25	; 0x19
     d44:	88 8f       	std	Y+24, r24	; 0x18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d46:	88 8d       	ldd	r24, Y+24	; 0x18
     d48:	99 8d       	ldd	r25, Y+25	; 0x19
     d4a:	00 97       	sbiw	r24, 0x00	; 0
     d4c:	51 f7       	brne	.-44     	; 0xd22 <key+0x388>
     d4e:	17 c0       	rjmp	.+46     	; 0xd7e <key+0x3e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d50:	6c 89       	ldd	r22, Y+20	; 0x14
     d52:	7d 89       	ldd	r23, Y+21	; 0x15
     d54:	8e 89       	ldd	r24, Y+22	; 0x16
     d56:	9f 89       	ldd	r25, Y+23	; 0x17
     d58:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     d5c:	dc 01       	movw	r26, r24
     d5e:	cb 01       	movw	r24, r22
     d60:	99 8f       	std	Y+25, r25	; 0x19
     d62:	88 8f       	std	Y+24, r24	; 0x18
     d64:	88 8d       	ldd	r24, Y+24	; 0x18
     d66:	99 8d       	ldd	r25, Y+25	; 0x19
     d68:	9d 8f       	std	Y+29, r25	; 0x1d
     d6a:	8c 8f       	std	Y+28, r24	; 0x1c
     d6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
     d6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
     d70:	8c 01       	movw	r16, r24
     d72:	f8 01       	movw	r30, r16
     d74:	31 97       	sbiw	r30, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <key+0x3da>
     d78:	8f 01       	movw	r16, r30
     d7a:	1d 8f       	std	Y+29, r17	; 0x1d
     d7c:	0c 8f       	std	Y+28, r16	; 0x1c
        }
		 }		 		
       _delay_ms(10);
	   
        PORTA = 0X0B;
     d7e:	8b e3       	ldi	r24, 0x3B	; 59
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	2b e0       	ldi	r18, 0x0B	; 11
     d84:	fc 01       	movw	r30, r24
     d86:	20 83       	st	Z, r18
        a = PINA & 0XF0;
     d88:	89 e3       	ldi	r24, 0x39	; 57
     d8a:	90 e0       	ldi	r25, 0x00	; 0
     d8c:	fc 01       	movw	r30, r24
     d8e:	80 81       	ld	r24, Z
     d90:	80 7f       	andi	r24, 0xF0	; 240
     d92:	89 83       	std	Y+1, r24	; 0x01
		
		if((PORTA&0x0F) == 0x0B){
     d94:	8b e3       	ldi	r24, 0x3B	; 59
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	fc 01       	movw	r30, r24
     d9a:	80 81       	ld	r24, Z
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	8f 70       	andi	r24, 0x0F	; 15
     da2:	90 70       	andi	r25, 0x00	; 0
     da4:	8b 30       	cpi	r24, 0x0B	; 11
     da6:	91 05       	cpc	r25, r1
     da8:	09 f0       	breq	.+2      	; 0xdac <key+0x412>
     daa:	5c c0       	rjmp	.+184    	; 0xe64 <key+0x4ca>
        switch(a)
     dac:	89 81       	ldd	r24, Y+1	; 0x01
     dae:	88 2f       	mov	r24, r24
     db0:	90 e0       	ldi	r25, 0x00	; 0
     db2:	80 3b       	cpi	r24, 0xB0	; 176
     db4:	91 05       	cpc	r25, r1
     db6:	01 f1       	breq	.+64     	; 0xdf8 <key+0x45e>
     db8:	81 3b       	cpi	r24, 0xB1	; 177
     dba:	91 05       	cpc	r25, r1
     dbc:	24 f4       	brge	.+8      	; 0xdc6 <key+0x42c>
     dbe:	80 37       	cpi	r24, 0x70	; 112
     dc0:	91 05       	cpc	r25, r1
     dc2:	41 f0       	breq	.+16     	; 0xdd4 <key+0x43a>
     dc4:	4f c0       	rjmp	.+158    	; 0xe64 <key+0x4ca>
     dc6:	80 3d       	cpi	r24, 0xD0	; 208
     dc8:	91 05       	cpc	r25, r1
     dca:	41 f1       	breq	.+80     	; 0xe1c <key+0x482>
     dcc:	80 3e       	cpi	r24, 0xE0	; 224
     dce:	91 05       	cpc	r25, r1
     dd0:	b9 f1       	breq	.+110    	; 0xe40 <key+0x4a6>
     dd2:	48 c0       	rjmp	.+144    	; 0xe64 <key+0x4ca>
        {
            case 0X70: while((PINA & 0XF0) == a);
     dd4:	00 00       	nop
     dd6:	89 e3       	ldi	r24, 0x39	; 57
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	fc 01       	movw	r30, r24
     ddc:	80 81       	ld	r24, Z
     dde:	88 2f       	mov	r24, r24
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	9c 01       	movw	r18, r24
     de4:	20 7f       	andi	r18, 0xF0	; 240
     de6:	30 70       	andi	r19, 0x00	; 0
     de8:	89 81       	ldd	r24, Y+1	; 0x01
     dea:	88 2f       	mov	r24, r24
     dec:	90 e0       	ldi	r25, 0x00	; 0
     dee:	28 17       	cp	r18, r24
     df0:	39 07       	cpc	r19, r25
     df2:	89 f3       	breq	.-30     	; 0xdd6 <key+0x43c>
						return('4');
     df4:	84 e3       	ldi	r24, 0x34	; 52
     df6:	aa c1       	rjmp	.+852    	; 0x114c <key+0x7b2>
            case 0XB0: while((PINA & 0XF0) == a);
     df8:	00 00       	nop
     dfa:	89 e3       	ldi	r24, 0x39	; 57
     dfc:	90 e0       	ldi	r25, 0x00	; 0
     dfe:	fc 01       	movw	r30, r24
     e00:	80 81       	ld	r24, Z
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	9c 01       	movw	r18, r24
     e08:	20 7f       	andi	r18, 0xF0	; 240
     e0a:	30 70       	andi	r19, 0x00	; 0
     e0c:	89 81       	ldd	r24, Y+1	; 0x01
     e0e:	88 2f       	mov	r24, r24
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	28 17       	cp	r18, r24
     e14:	39 07       	cpc	r19, r25
     e16:	89 f3       	breq	.-30     	; 0xdfa <key+0x460>
						return('5');
     e18:	85 e3       	ldi	r24, 0x35	; 53
     e1a:	98 c1       	rjmp	.+816    	; 0x114c <key+0x7b2>
            case 0XD0: while((PINA & 0XF0) == a);
     e1c:	00 00       	nop
     e1e:	89 e3       	ldi	r24, 0x39	; 57
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	fc 01       	movw	r30, r24
     e24:	80 81       	ld	r24, Z
     e26:	88 2f       	mov	r24, r24
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9c 01       	movw	r18, r24
     e2c:	20 7f       	andi	r18, 0xF0	; 240
     e2e:	30 70       	andi	r19, 0x00	; 0
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	88 2f       	mov	r24, r24
     e34:	90 e0       	ldi	r25, 0x00	; 0
     e36:	28 17       	cp	r18, r24
     e38:	39 07       	cpc	r19, r25
     e3a:	89 f3       	breq	.-30     	; 0xe1e <key+0x484>
						return('6');
     e3c:	86 e3       	ldi	r24, 0x36	; 54
     e3e:	86 c1       	rjmp	.+780    	; 0x114c <key+0x7b2>
            case 0XE0: while((PINA & 0XF0) == a);
     e40:	00 00       	nop
     e42:	89 e3       	ldi	r24, 0x39	; 57
     e44:	90 e0       	ldi	r25, 0x00	; 0
     e46:	fc 01       	movw	r30, r24
     e48:	80 81       	ld	r24, Z
     e4a:	88 2f       	mov	r24, r24
     e4c:	90 e0       	ldi	r25, 0x00	; 0
     e4e:	9c 01       	movw	r18, r24
     e50:	20 7f       	andi	r18, 0xF0	; 240
     e52:	30 70       	andi	r19, 0x00	; 0
     e54:	89 81       	ldd	r24, Y+1	; 0x01
     e56:	88 2f       	mov	r24, r24
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	28 17       	cp	r18, r24
     e5c:	39 07       	cpc	r19, r25
     e5e:	89 f3       	breq	.-30     	; 0xe42 <key+0x4a8>
						return('B');
     e60:	82 e4       	ldi	r24, 0x42	; 66
     e62:	74 c1       	rjmp	.+744    	; 0x114c <key+0x7b2>
     e64:	80 e0       	ldi	r24, 0x00	; 0
     e66:	90 e0       	ldi	r25, 0x00	; 0
     e68:	a0 e2       	ldi	r26, 0x20	; 32
     e6a:	b1 e4       	ldi	r27, 0x41	; 65
     e6c:	8e 8f       	std	Y+30, r24	; 0x1e
     e6e:	9f 8f       	std	Y+31, r25	; 0x1f
     e70:	a8 a3       	std	Y+32, r26	; 0x20
     e72:	b9 a3       	std	Y+33, r27	; 0x21
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
     e74:	6e 8d       	ldd	r22, Y+30	; 0x1e
     e76:	7f 8d       	ldd	r23, Y+31	; 0x1f
     e78:	88 a1       	ldd	r24, Y+32	; 0x20
     e7a:	99 a1       	ldd	r25, Y+33	; 0x21
     e7c:	20 e0       	ldi	r18, 0x00	; 0
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	4a e7       	ldi	r20, 0x7A	; 122
     e82:	53 e4       	ldi	r21, 0x43	; 67
     e84:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     e88:	dc 01       	movw	r26, r24
     e8a:	cb 01       	movw	r24, r22
     e8c:	8a a3       	std	Y+34, r24	; 0x22
     e8e:	9b a3       	std	Y+35, r25	; 0x23
     e90:	ac a3       	std	Y+36, r26	; 0x24
     e92:	bd a3       	std	Y+37, r27	; 0x25
	if (__tmp < 1.0)
     e94:	11 e0       	ldi	r17, 0x01	; 1
     e96:	6a a1       	ldd	r22, Y+34	; 0x22
     e98:	7b a1       	ldd	r23, Y+35	; 0x23
     e9a:	8c a1       	ldd	r24, Y+36	; 0x24
     e9c:	9d a1       	ldd	r25, Y+37	; 0x25
     e9e:	20 e0       	ldi	r18, 0x00	; 0
     ea0:	30 e0       	ldi	r19, 0x00	; 0
     ea2:	40 e8       	ldi	r20, 0x80	; 128
     ea4:	5f e3       	ldi	r21, 0x3F	; 63
     ea6:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
     eaa:	88 23       	and	r24, r24
     eac:	0c f0       	brlt	.+2      	; 0xeb0 <key+0x516>
     eae:	10 e0       	ldi	r17, 0x00	; 0
     eb0:	11 23       	and	r17, r17
     eb2:	29 f0       	breq	.+10     	; 0xebe <key+0x524>
		__ticks = 1;
     eb4:	81 e0       	ldi	r24, 0x01	; 1
     eb6:	90 e0       	ldi	r25, 0x00	; 0
     eb8:	9f a3       	std	Y+39, r25	; 0x27
     eba:	8e a3       	std	Y+38, r24	; 0x26
     ebc:	46 c0       	rjmp	.+140    	; 0xf4a <key+0x5b0>
	else if (__tmp > 65535)
     ebe:	11 e0       	ldi	r17, 0x01	; 1
     ec0:	6a a1       	ldd	r22, Y+34	; 0x22
     ec2:	7b a1       	ldd	r23, Y+35	; 0x23
     ec4:	8c a1       	ldd	r24, Y+36	; 0x24
     ec6:	9d a1       	ldd	r25, Y+37	; 0x25
     ec8:	20 e0       	ldi	r18, 0x00	; 0
     eca:	3f ef       	ldi	r19, 0xFF	; 255
     ecc:	4f e7       	ldi	r20, 0x7F	; 127
     ece:	57 e4       	ldi	r21, 0x47	; 71
     ed0:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
     ed4:	18 16       	cp	r1, r24
     ed6:	0c f0       	brlt	.+2      	; 0xeda <key+0x540>
     ed8:	10 e0       	ldi	r17, 0x00	; 0
     eda:	11 23       	and	r17, r17
     edc:	61 f1       	breq	.+88     	; 0xf36 <key+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ede:	6e 8d       	ldd	r22, Y+30	; 0x1e
     ee0:	7f 8d       	ldd	r23, Y+31	; 0x1f
     ee2:	88 a1       	ldd	r24, Y+32	; 0x20
     ee4:	99 a1       	ldd	r25, Y+33	; 0x21
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
     eea:	40 e2       	ldi	r20, 0x20	; 32
     eec:	51 e4       	ldi	r21, 0x41	; 65
     eee:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
     ef2:	dc 01       	movw	r26, r24
     ef4:	cb 01       	movw	r24, r22
     ef6:	bc 01       	movw	r22, r24
     ef8:	cd 01       	movw	r24, r26
     efa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     efe:	dc 01       	movw	r26, r24
     f00:	cb 01       	movw	r24, r22
     f02:	9f a3       	std	Y+39, r25	; 0x27
     f04:	8e a3       	std	Y+38, r24	; 0x26
     f06:	12 c0       	rjmp	.+36     	; 0xf2c <key+0x592>
     f08:	89 e1       	ldi	r24, 0x19	; 25
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	99 a7       	std	Y+41, r25	; 0x29
     f0e:	88 a7       	std	Y+40, r24	; 0x28
     f10:	88 a5       	ldd	r24, Y+40	; 0x28
     f12:	99 a5       	ldd	r25, Y+41	; 0x29
     f14:	8c 01       	movw	r16, r24
     f16:	c8 01       	movw	r24, r16
     f18:	01 97       	sbiw	r24, 0x01	; 1
     f1a:	f1 f7       	brne	.-4      	; 0xf18 <key+0x57e>
     f1c:	8c 01       	movw	r16, r24
     f1e:	19 a7       	std	Y+41, r17	; 0x29
     f20:	08 a7       	std	Y+40, r16	; 0x28
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f22:	8e a1       	ldd	r24, Y+38	; 0x26
     f24:	9f a1       	ldd	r25, Y+39	; 0x27
     f26:	01 97       	sbiw	r24, 0x01	; 1
     f28:	9f a3       	std	Y+39, r25	; 0x27
     f2a:	8e a3       	std	Y+38, r24	; 0x26
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f2c:	8e a1       	ldd	r24, Y+38	; 0x26
     f2e:	9f a1       	ldd	r25, Y+39	; 0x27
     f30:	00 97       	sbiw	r24, 0x00	; 0
     f32:	51 f7       	brne	.-44     	; 0xf08 <key+0x56e>
     f34:	17 c0       	rjmp	.+46     	; 0xf64 <key+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f36:	6a a1       	ldd	r22, Y+34	; 0x22
     f38:	7b a1       	ldd	r23, Y+35	; 0x23
     f3a:	8c a1       	ldd	r24, Y+36	; 0x24
     f3c:	9d a1       	ldd	r25, Y+37	; 0x25
     f3e:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
     f42:	dc 01       	movw	r26, r24
     f44:	cb 01       	movw	r24, r22
     f46:	9f a3       	std	Y+39, r25	; 0x27
     f48:	8e a3       	std	Y+38, r24	; 0x26
     f4a:	8e a1       	ldd	r24, Y+38	; 0x26
     f4c:	9f a1       	ldd	r25, Y+39	; 0x27
     f4e:	9b a7       	std	Y+43, r25	; 0x2b
     f50:	8a a7       	std	Y+42, r24	; 0x2a
     f52:	8a a5       	ldd	r24, Y+42	; 0x2a
     f54:	9b a5       	ldd	r25, Y+43	; 0x2b
     f56:	8c 01       	movw	r16, r24
     f58:	f8 01       	movw	r30, r16
     f5a:	31 97       	sbiw	r30, 0x01	; 1
     f5c:	f1 f7       	brne	.-4      	; 0xf5a <key+0x5c0>
     f5e:	8f 01       	movw	r16, r30
     f60:	1b a7       	std	Y+43, r17	; 0x2b
     f62:	0a a7       	std	Y+42, r16	; 0x2a
			}					   
        }
       _delay_ms(10);
	    
        PORTA = 0X0D;
     f64:	8b e3       	ldi	r24, 0x3B	; 59
     f66:	90 e0       	ldi	r25, 0x00	; 0
     f68:	2d e0       	ldi	r18, 0x0D	; 13
     f6a:	fc 01       	movw	r30, r24
     f6c:	20 83       	st	Z, r18
        a = PINA & 0XF0;
     f6e:	89 e3       	ldi	r24, 0x39	; 57
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	fc 01       	movw	r30, r24
     f74:	80 81       	ld	r24, Z
     f76:	80 7f       	andi	r24, 0xF0	; 240
     f78:	89 83       	std	Y+1, r24	; 0x01
		if((PORTA&0x0F) == 0x0D){
     f7a:	8b e3       	ldi	r24, 0x3B	; 59
     f7c:	90 e0       	ldi	r25, 0x00	; 0
     f7e:	fc 01       	movw	r30, r24
     f80:	80 81       	ld	r24, Z
     f82:	88 2f       	mov	r24, r24
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	8f 70       	andi	r24, 0x0F	; 15
     f88:	90 70       	andi	r25, 0x00	; 0
     f8a:	8d 30       	cpi	r24, 0x0D	; 13
     f8c:	91 05       	cpc	r25, r1
     f8e:	09 f0       	breq	.+2      	; 0xf92 <key+0x5f8>
     f90:	5c c0       	rjmp	.+184    	; 0x104a <key+0x6b0>
        switch(a)
     f92:	89 81       	ldd	r24, Y+1	; 0x01
     f94:	88 2f       	mov	r24, r24
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	80 3b       	cpi	r24, 0xB0	; 176
     f9a:	91 05       	cpc	r25, r1
     f9c:	01 f1       	breq	.+64     	; 0xfde <key+0x644>
     f9e:	81 3b       	cpi	r24, 0xB1	; 177
     fa0:	91 05       	cpc	r25, r1
     fa2:	24 f4       	brge	.+8      	; 0xfac <key+0x612>
     fa4:	80 37       	cpi	r24, 0x70	; 112
     fa6:	91 05       	cpc	r25, r1
     fa8:	41 f0       	breq	.+16     	; 0xfba <key+0x620>
     faa:	4f c0       	rjmp	.+158    	; 0x104a <key+0x6b0>
     fac:	80 3d       	cpi	r24, 0xD0	; 208
     fae:	91 05       	cpc	r25, r1
     fb0:	41 f1       	breq	.+80     	; 0x1002 <key+0x668>
     fb2:	80 3e       	cpi	r24, 0xE0	; 224
     fb4:	91 05       	cpc	r25, r1
     fb6:	b9 f1       	breq	.+110    	; 0x1026 <key+0x68c>
     fb8:	48 c0       	rjmp	.+144    	; 0x104a <key+0x6b0>
        {
            case 0X70: while((PINA & 0XF0) == a);
     fba:	00 00       	nop
     fbc:	89 e3       	ldi	r24, 0x39	; 57
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	fc 01       	movw	r30, r24
     fc2:	80 81       	ld	r24, Z
     fc4:	88 2f       	mov	r24, r24
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	9c 01       	movw	r18, r24
     fca:	20 7f       	andi	r18, 0xF0	; 240
     fcc:	30 70       	andi	r19, 0x00	; 0
     fce:	89 81       	ldd	r24, Y+1	; 0x01
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	28 17       	cp	r18, r24
     fd6:	39 07       	cpc	r19, r25
     fd8:	89 f3       	breq	.-30     	; 0xfbc <key+0x622>
						return('7');
     fda:	87 e3       	ldi	r24, 0x37	; 55
     fdc:	b7 c0       	rjmp	.+366    	; 0x114c <key+0x7b2>
            case 0XB0: while((PINA & 0XF0) == a);
     fde:	00 00       	nop
     fe0:	89 e3       	ldi	r24, 0x39	; 57
     fe2:	90 e0       	ldi	r25, 0x00	; 0
     fe4:	fc 01       	movw	r30, r24
     fe6:	80 81       	ld	r24, Z
     fe8:	88 2f       	mov	r24, r24
     fea:	90 e0       	ldi	r25, 0x00	; 0
     fec:	9c 01       	movw	r18, r24
     fee:	20 7f       	andi	r18, 0xF0	; 240
     ff0:	30 70       	andi	r19, 0x00	; 0
     ff2:	89 81       	ldd	r24, Y+1	; 0x01
     ff4:	88 2f       	mov	r24, r24
     ff6:	90 e0       	ldi	r25, 0x00	; 0
     ff8:	28 17       	cp	r18, r24
     ffa:	39 07       	cpc	r19, r25
     ffc:	89 f3       	breq	.-30     	; 0xfe0 <key+0x646>
						 return('8');
     ffe:	88 e3       	ldi	r24, 0x38	; 56
    1000:	a5 c0       	rjmp	.+330    	; 0x114c <key+0x7b2>
            case 0XD0: while((PINA & 0XF0) == a);
    1002:	00 00       	nop
    1004:	89 e3       	ldi	r24, 0x39	; 57
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	fc 01       	movw	r30, r24
    100a:	80 81       	ld	r24, Z
    100c:	88 2f       	mov	r24, r24
    100e:	90 e0       	ldi	r25, 0x00	; 0
    1010:	9c 01       	movw	r18, r24
    1012:	20 7f       	andi	r18, 0xF0	; 240
    1014:	30 70       	andi	r19, 0x00	; 0
    1016:	89 81       	ldd	r24, Y+1	; 0x01
    1018:	88 2f       	mov	r24, r24
    101a:	90 e0       	ldi	r25, 0x00	; 0
    101c:	28 17       	cp	r18, r24
    101e:	39 07       	cpc	r19, r25
    1020:	89 f3       	breq	.-30     	; 0x1004 <key+0x66a>
						return('9');
    1022:	89 e3       	ldi	r24, 0x39	; 57
    1024:	93 c0       	rjmp	.+294    	; 0x114c <key+0x7b2>
            case 0XE0: while((PINA & 0XF0) == a);
    1026:	00 00       	nop
    1028:	89 e3       	ldi	r24, 0x39	; 57
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	fc 01       	movw	r30, r24
    102e:	80 81       	ld	r24, Z
    1030:	88 2f       	mov	r24, r24
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	9c 01       	movw	r18, r24
    1036:	20 7f       	andi	r18, 0xF0	; 240
    1038:	30 70       	andi	r19, 0x00	; 0
    103a:	89 81       	ldd	r24, Y+1	; 0x01
    103c:	88 2f       	mov	r24, r24
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	28 17       	cp	r18, r24
    1042:	39 07       	cpc	r19, r25
    1044:	89 f3       	breq	.-30     	; 0x1028 <key+0x68e>
						return('C');
    1046:	83 e4       	ldi	r24, 0x43	; 67
    1048:	81 c0       	rjmp	.+258    	; 0x114c <key+0x7b2>
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	a0 e2       	ldi	r26, 0x20	; 32
    1050:	b1 e4       	ldi	r27, 0x41	; 65
    1052:	8c a7       	std	Y+44, r24	; 0x2c
    1054:	9d a7       	std	Y+45, r25	; 0x2d
    1056:	ae a7       	std	Y+46, r26	; 0x2e
    1058:	bf a7       	std	Y+47, r27	; 0x2f
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    105a:	6c a5       	ldd	r22, Y+44	; 0x2c
    105c:	7d a5       	ldd	r23, Y+45	; 0x2d
    105e:	8e a5       	ldd	r24, Y+46	; 0x2e
    1060:	9f a5       	ldd	r25, Y+47	; 0x2f
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a e7       	ldi	r20, 0x7A	; 122
    1068:	53 e4       	ldi	r21, 0x43	; 67
    106a:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	88 ab       	std	Y+48, r24	; 0x30
    1074:	99 ab       	std	Y+49, r25	; 0x31
    1076:	aa ab       	std	Y+50, r26	; 0x32
    1078:	bb ab       	std	Y+51, r27	; 0x33
	if (__tmp < 1.0)
    107a:	11 e0       	ldi	r17, 0x01	; 1
    107c:	68 a9       	ldd	r22, Y+48	; 0x30
    107e:	79 a9       	ldd	r23, Y+49	; 0x31
    1080:	8a a9       	ldd	r24, Y+50	; 0x32
    1082:	9b a9       	ldd	r25, Y+51	; 0x33
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	30 e0       	ldi	r19, 0x00	; 0
    1088:	40 e8       	ldi	r20, 0x80	; 128
    108a:	5f e3       	ldi	r21, 0x3F	; 63
    108c:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
    1090:	88 23       	and	r24, r24
    1092:	0c f0       	brlt	.+2      	; 0x1096 <key+0x6fc>
    1094:	10 e0       	ldi	r17, 0x00	; 0
    1096:	11 23       	and	r17, r17
    1098:	29 f0       	breq	.+10     	; 0x10a4 <key+0x70a>
		__ticks = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9d ab       	std	Y+53, r25	; 0x35
    10a0:	8c ab       	std	Y+52, r24	; 0x34
    10a2:	46 c0       	rjmp	.+140    	; 0x1130 <key+0x796>
	else if (__tmp > 65535)
    10a4:	11 e0       	ldi	r17, 0x01	; 1
    10a6:	68 a9       	ldd	r22, Y+48	; 0x30
    10a8:	79 a9       	ldd	r23, Y+49	; 0x31
    10aa:	8a a9       	ldd	r24, Y+50	; 0x32
    10ac:	9b a9       	ldd	r25, Y+51	; 0x33
    10ae:	20 e0       	ldi	r18, 0x00	; 0
    10b0:	3f ef       	ldi	r19, 0xFF	; 255
    10b2:	4f e7       	ldi	r20, 0x7F	; 127
    10b4:	57 e4       	ldi	r21, 0x47	; 71
    10b6:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
    10ba:	18 16       	cp	r1, r24
    10bc:	0c f0       	brlt	.+2      	; 0x10c0 <key+0x726>
    10be:	10 e0       	ldi	r17, 0x00	; 0
    10c0:	11 23       	and	r17, r17
    10c2:	61 f1       	breq	.+88     	; 0x111c <key+0x782>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10c4:	6c a5       	ldd	r22, Y+44	; 0x2c
    10c6:	7d a5       	ldd	r23, Y+45	; 0x2d
    10c8:	8e a5       	ldd	r24, Y+46	; 0x2e
    10ca:	9f a5       	ldd	r25, Y+47	; 0x2f
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 e0       	ldi	r19, 0x00	; 0
    10d0:	40 e2       	ldi	r20, 0x20	; 32
    10d2:	51 e4       	ldi	r21, 0x41	; 65
    10d4:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	bc 01       	movw	r22, r24
    10de:	cd 01       	movw	r24, r26
    10e0:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	9d ab       	std	Y+53, r25	; 0x35
    10ea:	8c ab       	std	Y+52, r24	; 0x34
    10ec:	12 c0       	rjmp	.+36     	; 0x1112 <key+0x778>
    10ee:	89 e1       	ldi	r24, 0x19	; 25
    10f0:	90 e0       	ldi	r25, 0x00	; 0
    10f2:	9f ab       	std	Y+55, r25	; 0x37
    10f4:	8e ab       	std	Y+54, r24	; 0x36
    10f6:	8e a9       	ldd	r24, Y+54	; 0x36
    10f8:	9f a9       	ldd	r25, Y+55	; 0x37
    10fa:	8c 01       	movw	r16, r24
    10fc:	c8 01       	movw	r24, r16
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	f1 f7       	brne	.-4      	; 0x10fe <key+0x764>
    1102:	8c 01       	movw	r16, r24
    1104:	1f ab       	std	Y+55, r17	; 0x37
    1106:	0e ab       	std	Y+54, r16	; 0x36
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1108:	8c a9       	ldd	r24, Y+52	; 0x34
    110a:	9d a9       	ldd	r25, Y+53	; 0x35
    110c:	01 97       	sbiw	r24, 0x01	; 1
    110e:	9d ab       	std	Y+53, r25	; 0x35
    1110:	8c ab       	std	Y+52, r24	; 0x34
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1112:	8c a9       	ldd	r24, Y+52	; 0x34
    1114:	9d a9       	ldd	r25, Y+53	; 0x35
    1116:	00 97       	sbiw	r24, 0x00	; 0
    1118:	51 f7       	brne	.-44     	; 0x10ee <key+0x754>
    111a:	17 c0       	rjmp	.+46     	; 0x114a <key+0x7b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    111c:	68 a9       	ldd	r22, Y+48	; 0x30
    111e:	79 a9       	ldd	r23, Y+49	; 0x31
    1120:	8a a9       	ldd	r24, Y+50	; 0x32
    1122:	9b a9       	ldd	r25, Y+51	; 0x33
    1124:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
    1128:	dc 01       	movw	r26, r24
    112a:	cb 01       	movw	r24, r22
    112c:	9d ab       	std	Y+53, r25	; 0x35
    112e:	8c ab       	std	Y+52, r24	; 0x34
    1130:	8c a9       	ldd	r24, Y+52	; 0x34
    1132:	9d a9       	ldd	r25, Y+53	; 0x35
    1134:	99 af       	std	Y+57, r25	; 0x39
    1136:	88 af       	std	Y+56, r24	; 0x38
    1138:	88 ad       	ldd	r24, Y+56	; 0x38
    113a:	99 ad       	ldd	r25, Y+57	; 0x39
    113c:	8c 01       	movw	r16, r24
    113e:	f8 01       	movw	r30, r16
    1140:	31 97       	sbiw	r30, 0x01	; 1
    1142:	f1 f7       	brne	.-4      	; 0x1140 <key+0x7a6>
    1144:	8f 01       	movw	r16, r30
    1146:	19 af       	std	Y+57, r17	; 0x39
    1148:	08 af       	std	Y+56, r16	; 0x38
        }
		}		
       _delay_ms(10);
	   
	   return('\0');
    114a:	80 e0       	ldi	r24, 0x00	; 0
}
    114c:	e9 96       	adiw	r28, 0x39	; 57
    114e:	0f b6       	in	r0, 0x3f	; 63
    1150:	f8 94       	cli
    1152:	de bf       	out	0x3e, r29	; 62
    1154:	0f be       	out	0x3f, r0	; 63
    1156:	cd bf       	out	0x3d, r28	; 61
    1158:	cf 91       	pop	r28
    115a:	df 91       	pop	r29
    115c:	1f 91       	pop	r17
    115e:	0f 91       	pop	r16
    1160:	08 95       	ret

00001162 <main>:

int main(void)
{
    1162:	0f 93       	push	r16
    1164:	1f 93       	push	r17
    1166:	df 93       	push	r29
    1168:	cf 93       	push	r28
    116a:	cd b7       	in	r28, 0x3d	; 61
    116c:	de b7       	in	r29, 0x3e	; 62
    116e:	2f 97       	sbiw	r28, 0x0f	; 15
    1170:	0f b6       	in	r0, 0x3f	; 63
    1172:	f8 94       	cli
    1174:	de bf       	out	0x3e, r29	; 62
    1176:	0f be       	out	0x3f, r0	; 63
    1178:	cd bf       	out	0x3d, r28	; 61
	char a;
	DDRA = 0x0F;
    117a:	8a e3       	ldi	r24, 0x3A	; 58
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	2f e0       	ldi	r18, 0x0F	; 15
    1180:	fc 01       	movw	r30, r24
    1182:	20 83       	st	Z, r18
	lcd_init();
    1184:	0e 94 b0 04 	call	0x960	; 0x960 <lcd_init>
	CMD(0x80);
    1188:	80 e8       	ldi	r24, 0x80	; 128
    118a:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
	StringData("KEYPAD TESTING");
    118e:	80 e6       	ldi	r24, 0x60	; 96
    1190:	90 e0       	ldi	r25, 0x00	; 0
    1192:	0e 94 55 03 	call	0x6aa	; 0x6aa <StringData>
	CMD(0xC0);
    1196:	80 ec       	ldi	r24, 0xC0	; 192
    1198:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
    119c:	01 c0       	rjmp	.+2      	; 0x11a0 <main+0x3e>
       _delay_ms(250);
       if(a != '\0'){
		   CMD(0xC0);
           CharData(a);
	   }		   
    }
    119e:	00 00       	nop
	StringData("KEYPAD TESTING");
	CMD(0xC0);
	
    while(1)
    {
       a = key();
    11a0:	0e 94 cd 04 	call	0x99a	; 0x99a <key>
    11a4:	89 83       	std	Y+1, r24	; 0x01
    11a6:	80 e0       	ldi	r24, 0x00	; 0
    11a8:	90 e0       	ldi	r25, 0x00	; 0
    11aa:	aa e7       	ldi	r26, 0x7A	; 122
    11ac:	b3 e4       	ldi	r27, 0x43	; 67
    11ae:	8a 83       	std	Y+2, r24	; 0x02
    11b0:	9b 83       	std	Y+3, r25	; 0x03
    11b2:	ac 83       	std	Y+4, r26	; 0x04
    11b4:	bd 83       	std	Y+5, r27	; 0x05
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);

#elif !__HAS_DELAY_CYCLES || (__HAS_DELAY_CYCLES && !defined(__OPTIMIZE__)) || defined (__DELAY_BACKWARD_COMPATIBLE__)
	__tmp = ((F_CPU) / 4e3) * __ms;
    11b6:	6a 81       	ldd	r22, Y+2	; 0x02
    11b8:	7b 81       	ldd	r23, Y+3	; 0x03
    11ba:	8c 81       	ldd	r24, Y+4	; 0x04
    11bc:	9d 81       	ldd	r25, Y+5	; 0x05
    11be:	20 e0       	ldi	r18, 0x00	; 0
    11c0:	30 e0       	ldi	r19, 0x00	; 0
    11c2:	4a e7       	ldi	r20, 0x7A	; 122
    11c4:	53 e4       	ldi	r21, 0x43	; 67
    11c6:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
    11ca:	dc 01       	movw	r26, r24
    11cc:	cb 01       	movw	r24, r22
    11ce:	8e 83       	std	Y+6, r24	; 0x06
    11d0:	9f 83       	std	Y+7, r25	; 0x07
    11d2:	a8 87       	std	Y+8, r26	; 0x08
    11d4:	b9 87       	std	Y+9, r27	; 0x09
	if (__tmp < 1.0)
    11d6:	11 e0       	ldi	r17, 0x01	; 1
    11d8:	6e 81       	ldd	r22, Y+6	; 0x06
    11da:	7f 81       	ldd	r23, Y+7	; 0x07
    11dc:	88 85       	ldd	r24, Y+8	; 0x08
    11de:	99 85       	ldd	r25, Y+9	; 0x09
    11e0:	20 e0       	ldi	r18, 0x00	; 0
    11e2:	30 e0       	ldi	r19, 0x00	; 0
    11e4:	40 e8       	ldi	r20, 0x80	; 128
    11e6:	5f e3       	ldi	r21, 0x3F	; 63
    11e8:	0e 94 8c 0c 	call	0x1918	; 0x1918 <__ltsf2>
    11ec:	88 23       	and	r24, r24
    11ee:	0c f0       	brlt	.+2      	; 0x11f2 <main+0x90>
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	11 23       	and	r17, r17
    11f4:	29 f0       	breq	.+10     	; 0x1200 <main+0x9e>
		__ticks = 1;
    11f6:	81 e0       	ldi	r24, 0x01	; 1
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	9b 87       	std	Y+11, r25	; 0x0b
    11fc:	8a 87       	std	Y+10, r24	; 0x0a
    11fe:	46 c0       	rjmp	.+140    	; 0x128c <main+0x12a>
	else if (__tmp > 65535)
    1200:	11 e0       	ldi	r17, 0x01	; 1
    1202:	6e 81       	ldd	r22, Y+6	; 0x06
    1204:	7f 81       	ldd	r23, Y+7	; 0x07
    1206:	88 85       	ldd	r24, Y+8	; 0x08
    1208:	99 85       	ldd	r25, Y+9	; 0x09
    120a:	20 e0       	ldi	r18, 0x00	; 0
    120c:	3f ef       	ldi	r19, 0xFF	; 255
    120e:	4f e7       	ldi	r20, 0x7F	; 127
    1210:	57 e4       	ldi	r21, 0x47	; 71
    1212:	0e 94 2c 0c 	call	0x1858	; 0x1858 <__gtsf2>
    1216:	18 16       	cp	r1, r24
    1218:	0c f0       	brlt	.+2      	; 0x121c <main+0xba>
    121a:	10 e0       	ldi	r17, 0x00	; 0
    121c:	11 23       	and	r17, r17
    121e:	61 f1       	breq	.+88     	; 0x1278 <main+0x116>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1220:	6a 81       	ldd	r22, Y+2	; 0x02
    1222:	7b 81       	ldd	r23, Y+3	; 0x03
    1224:	8c 81       	ldd	r24, Y+4	; 0x04
    1226:	9d 81       	ldd	r25, Y+5	; 0x05
    1228:	20 e0       	ldi	r18, 0x00	; 0
    122a:	30 e0       	ldi	r19, 0x00	; 0
    122c:	40 e2       	ldi	r20, 0x20	; 32
    122e:	51 e4       	ldi	r21, 0x41	; 65
    1230:	0e 94 32 0b 	call	0x1664	; 0x1664 <__mulsf3>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	bc 01       	movw	r22, r24
    123a:	cd 01       	movw	r24, r26
    123c:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	9b 87       	std	Y+11, r25	; 0x0b
    1246:	8a 87       	std	Y+10, r24	; 0x0a
    1248:	12 c0       	rjmp	.+36     	; 0x126e <main+0x10c>
    124a:	89 e1       	ldi	r24, 0x19	; 25
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	9d 87       	std	Y+13, r25	; 0x0d
    1250:	8c 87       	std	Y+12, r24	; 0x0c
    1252:	8c 85       	ldd	r24, Y+12	; 0x0c
    1254:	9d 85       	ldd	r25, Y+13	; 0x0d
    1256:	8c 01       	movw	r16, r24
    1258:	c8 01       	movw	r24, r16
    125a:	01 97       	sbiw	r24, 0x01	; 1
    125c:	f1 f7       	brne	.-4      	; 0x125a <main+0xf8>
    125e:	8c 01       	movw	r16, r24
    1260:	1d 87       	std	Y+13, r17	; 0x0d
    1262:	0c 87       	std	Y+12, r16	; 0x0c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1264:	8a 85       	ldd	r24, Y+10	; 0x0a
    1266:	9b 85       	ldd	r25, Y+11	; 0x0b
    1268:	01 97       	sbiw	r24, 0x01	; 1
    126a:	9b 87       	std	Y+11, r25	; 0x0b
    126c:	8a 87       	std	Y+10, r24	; 0x0a
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    126e:	8a 85       	ldd	r24, Y+10	; 0x0a
    1270:	9b 85       	ldd	r25, Y+11	; 0x0b
    1272:	00 97       	sbiw	r24, 0x00	; 0
    1274:	51 f7       	brne	.-44     	; 0x124a <main+0xe8>
    1276:	17 c0       	rjmp	.+46     	; 0x12a6 <main+0x144>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1278:	6e 81       	ldd	r22, Y+6	; 0x06
    127a:	7f 81       	ldd	r23, Y+7	; 0x07
    127c:	88 85       	ldd	r24, Y+8	; 0x08
    127e:	99 85       	ldd	r25, Y+9	; 0x09
    1280:	0e 94 5e 09 	call	0x12bc	; 0x12bc <__fixunssfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	9b 87       	std	Y+11, r25	; 0x0b
    128a:	8a 87       	std	Y+10, r24	; 0x0a
    128c:	8a 85       	ldd	r24, Y+10	; 0x0a
    128e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1290:	9f 87       	std	Y+15, r25	; 0x0f
    1292:	8e 87       	std	Y+14, r24	; 0x0e
    1294:	8e 85       	ldd	r24, Y+14	; 0x0e
    1296:	9f 85       	ldd	r25, Y+15	; 0x0f
    1298:	8c 01       	movw	r16, r24
    129a:	f8 01       	movw	r30, r16
    129c:	31 97       	sbiw	r30, 0x01	; 1
    129e:	f1 f7       	brne	.-4      	; 0x129c <main+0x13a>
    12a0:	8f 01       	movw	r16, r30
    12a2:	1f 87       	std	Y+15, r17	; 0x0f
    12a4:	0e 87       	std	Y+14, r16	; 0x0e
       _delay_ms(250);
       if(a != '\0'){
    12a6:	89 81       	ldd	r24, Y+1	; 0x01
    12a8:	88 23       	and	r24, r24
    12aa:	09 f4       	brne	.+2      	; 0x12ae <main+0x14c>
    12ac:	78 cf       	rjmp	.-272    	; 0x119e <main+0x3c>
		   CMD(0xC0);
    12ae:	80 ec       	ldi	r24, 0xC0	; 192
    12b0:	0e 94 41 00 	call	0x82	; 0x82 <CMD>
           CharData(a);
    12b4:	89 81       	ldd	r24, Y+1	; 0x01
    12b6:	0e 94 0b 02 	call	0x416	; 0x416 <CharData>
	   }		   
    }
    12ba:	72 cf       	rjmp	.-284    	; 0x11a0 <main+0x3e>

000012bc <__fixunssfsi>:
    12bc:	ef 92       	push	r14
    12be:	ff 92       	push	r15
    12c0:	0f 93       	push	r16
    12c2:	1f 93       	push	r17
    12c4:	7b 01       	movw	r14, r22
    12c6:	8c 01       	movw	r16, r24
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	30 e0       	ldi	r19, 0x00	; 0
    12cc:	40 e0       	ldi	r20, 0x00	; 0
    12ce:	5f e4       	ldi	r21, 0x4F	; 79
    12d0:	0e 94 5c 0c 	call	0x18b8	; 0x18b8 <__gesf2>
    12d4:	87 fd       	sbrc	r24, 7
    12d6:	11 c0       	rjmp	.+34     	; 0x12fa <__fixunssfsi+0x3e>
    12d8:	c8 01       	movw	r24, r16
    12da:	b7 01       	movw	r22, r14
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	30 e0       	ldi	r19, 0x00	; 0
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	5f e4       	ldi	r21, 0x4F	; 79
    12e4:	0e 94 01 0b 	call	0x1602	; 0x1602 <__subsf3>
    12e8:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fixsfsi>
    12ec:	9b 01       	movw	r18, r22
    12ee:	ac 01       	movw	r20, r24
    12f0:	20 50       	subi	r18, 0x00	; 0
    12f2:	30 40       	sbci	r19, 0x00	; 0
    12f4:	40 40       	sbci	r20, 0x00	; 0
    12f6:	50 48       	sbci	r21, 0x80	; 128
    12f8:	06 c0       	rjmp	.+12     	; 0x1306 <__fixunssfsi+0x4a>
    12fa:	c8 01       	movw	r24, r16
    12fc:	b7 01       	movw	r22, r14
    12fe:	0e 94 bc 0c 	call	0x1978	; 0x1978 <__fixsfsi>
    1302:	9b 01       	movw	r18, r22
    1304:	ac 01       	movw	r20, r24
    1306:	b9 01       	movw	r22, r18
    1308:	ca 01       	movw	r24, r20
    130a:	1f 91       	pop	r17
    130c:	0f 91       	pop	r16
    130e:	ff 90       	pop	r15
    1310:	ef 90       	pop	r14
    1312:	08 95       	ret

00001314 <_fpadd_parts>:
    1314:	a0 e0       	ldi	r26, 0x00	; 0
    1316:	b0 e0       	ldi	r27, 0x00	; 0
    1318:	e0 e9       	ldi	r30, 0x90	; 144
    131a:	f9 e0       	ldi	r31, 0x09	; 9
    131c:	0c 94 a2 0e 	jmp	0x1d44	; 0x1d44 <__prologue_saves__+0x8>
    1320:	fc 01       	movw	r30, r24
    1322:	ea 01       	movw	r28, r20
    1324:	80 81       	ld	r24, Z
    1326:	82 30       	cpi	r24, 0x02	; 2
    1328:	08 f4       	brcc	.+2      	; 0x132c <_fpadd_parts+0x18>
    132a:	38 c1       	rjmp	.+624    	; 0x159c <_fpadd_parts+0x288>
    132c:	db 01       	movw	r26, r22
    132e:	9c 91       	ld	r25, X
    1330:	92 30       	cpi	r25, 0x02	; 2
    1332:	08 f4       	brcc	.+2      	; 0x1336 <_fpadd_parts+0x22>
    1334:	30 c1       	rjmp	.+608    	; 0x1596 <_fpadd_parts+0x282>
    1336:	84 30       	cpi	r24, 0x04	; 4
    1338:	59 f4       	brne	.+22     	; 0x1350 <_fpadd_parts+0x3c>
    133a:	94 30       	cpi	r25, 0x04	; 4
    133c:	09 f0       	breq	.+2      	; 0x1340 <_fpadd_parts+0x2c>
    133e:	2e c1       	rjmp	.+604    	; 0x159c <_fpadd_parts+0x288>
    1340:	91 81       	ldd	r25, Z+1	; 0x01
    1342:	11 96       	adiw	r26, 0x01	; 1
    1344:	8c 91       	ld	r24, X
    1346:	11 97       	sbiw	r26, 0x01	; 1
    1348:	98 17       	cp	r25, r24
    134a:	09 f0       	breq	.+2      	; 0x134e <_fpadd_parts+0x3a>
    134c:	21 c1       	rjmp	.+578    	; 0x1590 <_fpadd_parts+0x27c>
    134e:	26 c1       	rjmp	.+588    	; 0x159c <_fpadd_parts+0x288>
    1350:	94 30       	cpi	r25, 0x04	; 4
    1352:	09 f4       	brne	.+2      	; 0x1356 <_fpadd_parts+0x42>
    1354:	20 c1       	rjmp	.+576    	; 0x1596 <_fpadd_parts+0x282>
    1356:	92 30       	cpi	r25, 0x02	; 2
    1358:	b1 f4       	brne	.+44     	; 0x1386 <_fpadd_parts+0x72>
    135a:	82 30       	cpi	r24, 0x02	; 2
    135c:	09 f0       	breq	.+2      	; 0x1360 <_fpadd_parts+0x4c>
    135e:	1e c1       	rjmp	.+572    	; 0x159c <_fpadd_parts+0x288>
    1360:	ca 01       	movw	r24, r20
    1362:	af 01       	movw	r20, r30
    1364:	28 e0       	ldi	r18, 0x08	; 8
    1366:	da 01       	movw	r26, r20
    1368:	0d 90       	ld	r0, X+
    136a:	ad 01       	movw	r20, r26
    136c:	dc 01       	movw	r26, r24
    136e:	0d 92       	st	X+, r0
    1370:	cd 01       	movw	r24, r26
    1372:	21 50       	subi	r18, 0x01	; 1
    1374:	c1 f7       	brne	.-16     	; 0x1366 <_fpadd_parts+0x52>
    1376:	db 01       	movw	r26, r22
    1378:	11 96       	adiw	r26, 0x01	; 1
    137a:	8c 91       	ld	r24, X
    137c:	11 97       	sbiw	r26, 0x01	; 1
    137e:	91 81       	ldd	r25, Z+1	; 0x01
    1380:	89 23       	and	r24, r25
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	0a c1       	rjmp	.+532    	; 0x159a <_fpadd_parts+0x286>
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	09 f4       	brne	.+2      	; 0x138c <_fpadd_parts+0x78>
    138a:	05 c1       	rjmp	.+522    	; 0x1596 <_fpadd_parts+0x282>
    138c:	c2 80       	ldd	r12, Z+2	; 0x02
    138e:	d3 80       	ldd	r13, Z+3	; 0x03
    1390:	db 01       	movw	r26, r22
    1392:	12 96       	adiw	r26, 0x02	; 2
    1394:	6d 90       	ld	r6, X+
    1396:	7c 90       	ld	r7, X
    1398:	13 97       	sbiw	r26, 0x03	; 3
    139a:	24 81       	ldd	r18, Z+4	; 0x04
    139c:	35 81       	ldd	r19, Z+5	; 0x05
    139e:	46 81       	ldd	r20, Z+6	; 0x06
    13a0:	57 81       	ldd	r21, Z+7	; 0x07
    13a2:	14 96       	adiw	r26, 0x04	; 4
    13a4:	ed 90       	ld	r14, X+
    13a6:	fd 90       	ld	r15, X+
    13a8:	0d 91       	ld	r16, X+
    13aa:	1c 91       	ld	r17, X
    13ac:	17 97       	sbiw	r26, 0x07	; 7
    13ae:	c6 01       	movw	r24, r12
    13b0:	86 19       	sub	r24, r6
    13b2:	97 09       	sbc	r25, r7
    13b4:	5c 01       	movw	r10, r24
    13b6:	97 ff       	sbrs	r25, 7
    13b8:	04 c0       	rjmp	.+8      	; 0x13c2 <_fpadd_parts+0xae>
    13ba:	aa 24       	eor	r10, r10
    13bc:	bb 24       	eor	r11, r11
    13be:	a8 1a       	sub	r10, r24
    13c0:	b9 0a       	sbc	r11, r25
    13c2:	b0 e2       	ldi	r27, 0x20	; 32
    13c4:	ab 16       	cp	r10, r27
    13c6:	b1 04       	cpc	r11, r1
    13c8:	0c f0       	brlt	.+2      	; 0x13cc <_fpadd_parts+0xb8>
    13ca:	61 c0       	rjmp	.+194    	; 0x148e <_fpadd_parts+0x17a>
    13cc:	18 16       	cp	r1, r24
    13ce:	19 06       	cpc	r1, r25
    13d0:	6c f5       	brge	.+90     	; 0x142c <_fpadd_parts+0x118>
    13d2:	37 01       	movw	r6, r14
    13d4:	48 01       	movw	r8, r16
    13d6:	0a 2c       	mov	r0, r10
    13d8:	04 c0       	rjmp	.+8      	; 0x13e2 <_fpadd_parts+0xce>
    13da:	96 94       	lsr	r9
    13dc:	87 94       	ror	r8
    13de:	77 94       	ror	r7
    13e0:	67 94       	ror	r6
    13e2:	0a 94       	dec	r0
    13e4:	d2 f7       	brpl	.-12     	; 0x13da <_fpadd_parts+0xc6>
    13e6:	81 e0       	ldi	r24, 0x01	; 1
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	0a 2c       	mov	r0, r10
    13f0:	04 c0       	rjmp	.+8      	; 0x13fa <_fpadd_parts+0xe6>
    13f2:	88 0f       	add	r24, r24
    13f4:	99 1f       	adc	r25, r25
    13f6:	aa 1f       	adc	r26, r26
    13f8:	bb 1f       	adc	r27, r27
    13fa:	0a 94       	dec	r0
    13fc:	d2 f7       	brpl	.-12     	; 0x13f2 <_fpadd_parts+0xde>
    13fe:	01 97       	sbiw	r24, 0x01	; 1
    1400:	a1 09       	sbc	r26, r1
    1402:	b1 09       	sbc	r27, r1
    1404:	8e 21       	and	r24, r14
    1406:	9f 21       	and	r25, r15
    1408:	a0 23       	and	r26, r16
    140a:	b1 23       	and	r27, r17
    140c:	ee 24       	eor	r14, r14
    140e:	ff 24       	eor	r15, r15
    1410:	87 01       	movw	r16, r14
    1412:	e3 94       	inc	r14
    1414:	00 97       	sbiw	r24, 0x00	; 0
    1416:	a1 05       	cpc	r26, r1
    1418:	b1 05       	cpc	r27, r1
    141a:	19 f4       	brne	.+6      	; 0x1422 <_fpadd_parts+0x10e>
    141c:	ee 24       	eor	r14, r14
    141e:	ff 24       	eor	r15, r15
    1420:	87 01       	movw	r16, r14
    1422:	e6 28       	or	r14, r6
    1424:	f7 28       	or	r15, r7
    1426:	08 29       	or	r16, r8
    1428:	19 29       	or	r17, r9
    142a:	3c c0       	rjmp	.+120    	; 0x14a4 <_fpadd_parts+0x190>
    142c:	00 97       	sbiw	r24, 0x00	; 0
    142e:	d1 f1       	breq	.+116    	; 0x14a4 <_fpadd_parts+0x190>
    1430:	ca 0c       	add	r12, r10
    1432:	db 1c       	adc	r13, r11
    1434:	39 01       	movw	r6, r18
    1436:	4a 01       	movw	r8, r20
    1438:	0a 2c       	mov	r0, r10
    143a:	04 c0       	rjmp	.+8      	; 0x1444 <_fpadd_parts+0x130>
    143c:	96 94       	lsr	r9
    143e:	87 94       	ror	r8
    1440:	77 94       	ror	r7
    1442:	67 94       	ror	r6
    1444:	0a 94       	dec	r0
    1446:	d2 f7       	brpl	.-12     	; 0x143c <_fpadd_parts+0x128>
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	a0 e0       	ldi	r26, 0x00	; 0
    144e:	b0 e0       	ldi	r27, 0x00	; 0
    1450:	0a 2c       	mov	r0, r10
    1452:	04 c0       	rjmp	.+8      	; 0x145c <_fpadd_parts+0x148>
    1454:	88 0f       	add	r24, r24
    1456:	99 1f       	adc	r25, r25
    1458:	aa 1f       	adc	r26, r26
    145a:	bb 1f       	adc	r27, r27
    145c:	0a 94       	dec	r0
    145e:	d2 f7       	brpl	.-12     	; 0x1454 <_fpadd_parts+0x140>
    1460:	01 97       	sbiw	r24, 0x01	; 1
    1462:	a1 09       	sbc	r26, r1
    1464:	b1 09       	sbc	r27, r1
    1466:	82 23       	and	r24, r18
    1468:	93 23       	and	r25, r19
    146a:	a4 23       	and	r26, r20
    146c:	b5 23       	and	r27, r21
    146e:	21 e0       	ldi	r18, 0x01	; 1
    1470:	30 e0       	ldi	r19, 0x00	; 0
    1472:	40 e0       	ldi	r20, 0x00	; 0
    1474:	50 e0       	ldi	r21, 0x00	; 0
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	a1 05       	cpc	r26, r1
    147a:	b1 05       	cpc	r27, r1
    147c:	19 f4       	brne	.+6      	; 0x1484 <_fpadd_parts+0x170>
    147e:	20 e0       	ldi	r18, 0x00	; 0
    1480:	30 e0       	ldi	r19, 0x00	; 0
    1482:	a9 01       	movw	r20, r18
    1484:	26 29       	or	r18, r6
    1486:	37 29       	or	r19, r7
    1488:	48 29       	or	r20, r8
    148a:	59 29       	or	r21, r9
    148c:	0b c0       	rjmp	.+22     	; 0x14a4 <_fpadd_parts+0x190>
    148e:	6c 14       	cp	r6, r12
    1490:	7d 04       	cpc	r7, r13
    1492:	24 f4       	brge	.+8      	; 0x149c <_fpadd_parts+0x188>
    1494:	ee 24       	eor	r14, r14
    1496:	ff 24       	eor	r15, r15
    1498:	87 01       	movw	r16, r14
    149a:	04 c0       	rjmp	.+8      	; 0x14a4 <_fpadd_parts+0x190>
    149c:	63 01       	movw	r12, r6
    149e:	20 e0       	ldi	r18, 0x00	; 0
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	a9 01       	movw	r20, r18
    14a4:	81 81       	ldd	r24, Z+1	; 0x01
    14a6:	fb 01       	movw	r30, r22
    14a8:	91 81       	ldd	r25, Z+1	; 0x01
    14aa:	89 17       	cp	r24, r25
    14ac:	09 f4       	brne	.+2      	; 0x14b0 <_fpadd_parts+0x19c>
    14ae:	45 c0       	rjmp	.+138    	; 0x153a <_fpadd_parts+0x226>
    14b0:	88 23       	and	r24, r24
    14b2:	49 f0       	breq	.+18     	; 0x14c6 <_fpadd_parts+0x1b2>
    14b4:	d8 01       	movw	r26, r16
    14b6:	c7 01       	movw	r24, r14
    14b8:	82 1b       	sub	r24, r18
    14ba:	93 0b       	sbc	r25, r19
    14bc:	a4 0b       	sbc	r26, r20
    14be:	b5 0b       	sbc	r27, r21
    14c0:	9c 01       	movw	r18, r24
    14c2:	ad 01       	movw	r20, r26
    14c4:	04 c0       	rjmp	.+8      	; 0x14ce <_fpadd_parts+0x1ba>
    14c6:	2e 19       	sub	r18, r14
    14c8:	3f 09       	sbc	r19, r15
    14ca:	40 0b       	sbc	r20, r16
    14cc:	51 0b       	sbc	r21, r17
    14ce:	57 fd       	sbrc	r21, 7
    14d0:	04 c0       	rjmp	.+8      	; 0x14da <_fpadd_parts+0x1c6>
    14d2:	19 82       	std	Y+1, r1	; 0x01
    14d4:	db 82       	std	Y+3, r13	; 0x03
    14d6:	ca 82       	std	Y+2, r12	; 0x02
    14d8:	0b c0       	rjmp	.+22     	; 0x14f0 <_fpadd_parts+0x1dc>
    14da:	81 e0       	ldi	r24, 0x01	; 1
    14dc:	89 83       	std	Y+1, r24	; 0x01
    14de:	db 82       	std	Y+3, r13	; 0x03
    14e0:	ca 82       	std	Y+2, r12	; 0x02
    14e2:	50 95       	com	r21
    14e4:	40 95       	com	r20
    14e6:	30 95       	com	r19
    14e8:	21 95       	neg	r18
    14ea:	3f 4f       	sbci	r19, 0xFF	; 255
    14ec:	4f 4f       	sbci	r20, 0xFF	; 255
    14ee:	5f 4f       	sbci	r21, 0xFF	; 255
    14f0:	2c 83       	std	Y+4, r18	; 0x04
    14f2:	3d 83       	std	Y+5, r19	; 0x05
    14f4:	4e 83       	std	Y+6, r20	; 0x06
    14f6:	5f 83       	std	Y+7, r21	; 0x07
    14f8:	0d c0       	rjmp	.+26     	; 0x1514 <_fpadd_parts+0x200>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	aa 1f       	adc	r26, r26
    1500:	bb 1f       	adc	r27, r27
    1502:	8c 83       	std	Y+4, r24	; 0x04
    1504:	9d 83       	std	Y+5, r25	; 0x05
    1506:	ae 83       	std	Y+6, r26	; 0x06
    1508:	bf 83       	std	Y+7, r27	; 0x07
    150a:	8a 81       	ldd	r24, Y+2	; 0x02
    150c:	9b 81       	ldd	r25, Y+3	; 0x03
    150e:	01 97       	sbiw	r24, 0x01	; 1
    1510:	9b 83       	std	Y+3, r25	; 0x03
    1512:	8a 83       	std	Y+2, r24	; 0x02
    1514:	8c 81       	ldd	r24, Y+4	; 0x04
    1516:	9d 81       	ldd	r25, Y+5	; 0x05
    1518:	ae 81       	ldd	r26, Y+6	; 0x06
    151a:	bf 81       	ldd	r27, Y+7	; 0x07
    151c:	9c 01       	movw	r18, r24
    151e:	ad 01       	movw	r20, r26
    1520:	21 50       	subi	r18, 0x01	; 1
    1522:	30 40       	sbci	r19, 0x00	; 0
    1524:	40 40       	sbci	r20, 0x00	; 0
    1526:	50 40       	sbci	r21, 0x00	; 0
    1528:	2f 3f       	cpi	r18, 0xFF	; 255
    152a:	ef ef       	ldi	r30, 0xFF	; 255
    152c:	3e 07       	cpc	r19, r30
    152e:	ef ef       	ldi	r30, 0xFF	; 255
    1530:	4e 07       	cpc	r20, r30
    1532:	ef e3       	ldi	r30, 0x3F	; 63
    1534:	5e 07       	cpc	r21, r30
    1536:	08 f3       	brcs	.-62     	; 0x14fa <_fpadd_parts+0x1e6>
    1538:	0b c0       	rjmp	.+22     	; 0x1550 <_fpadd_parts+0x23c>
    153a:	89 83       	std	Y+1, r24	; 0x01
    153c:	db 82       	std	Y+3, r13	; 0x03
    153e:	ca 82       	std	Y+2, r12	; 0x02
    1540:	2e 0d       	add	r18, r14
    1542:	3f 1d       	adc	r19, r15
    1544:	40 1f       	adc	r20, r16
    1546:	51 1f       	adc	r21, r17
    1548:	2c 83       	std	Y+4, r18	; 0x04
    154a:	3d 83       	std	Y+5, r19	; 0x05
    154c:	4e 83       	std	Y+6, r20	; 0x06
    154e:	5f 83       	std	Y+7, r21	; 0x07
    1550:	83 e0       	ldi	r24, 0x03	; 3
    1552:	88 83       	st	Y, r24
    1554:	2c 81       	ldd	r18, Y+4	; 0x04
    1556:	3d 81       	ldd	r19, Y+5	; 0x05
    1558:	4e 81       	ldd	r20, Y+6	; 0x06
    155a:	5f 81       	ldd	r21, Y+7	; 0x07
    155c:	57 ff       	sbrs	r21, 7
    155e:	1d c0       	rjmp	.+58     	; 0x159a <_fpadd_parts+0x286>
    1560:	da 01       	movw	r26, r20
    1562:	c9 01       	movw	r24, r18
    1564:	81 70       	andi	r24, 0x01	; 1
    1566:	90 70       	andi	r25, 0x00	; 0
    1568:	a0 70       	andi	r26, 0x00	; 0
    156a:	b0 70       	andi	r27, 0x00	; 0
    156c:	56 95       	lsr	r21
    156e:	47 95       	ror	r20
    1570:	37 95       	ror	r19
    1572:	27 95       	ror	r18
    1574:	82 2b       	or	r24, r18
    1576:	93 2b       	or	r25, r19
    1578:	a4 2b       	or	r26, r20
    157a:	b5 2b       	or	r27, r21
    157c:	8c 83       	std	Y+4, r24	; 0x04
    157e:	9d 83       	std	Y+5, r25	; 0x05
    1580:	ae 83       	std	Y+6, r26	; 0x06
    1582:	bf 83       	std	Y+7, r27	; 0x07
    1584:	8a 81       	ldd	r24, Y+2	; 0x02
    1586:	9b 81       	ldd	r25, Y+3	; 0x03
    1588:	01 96       	adiw	r24, 0x01	; 1
    158a:	9b 83       	std	Y+3, r25	; 0x03
    158c:	8a 83       	std	Y+2, r24	; 0x02
    158e:	05 c0       	rjmp	.+10     	; 0x159a <_fpadd_parts+0x286>
    1590:	ef e6       	ldi	r30, 0x6F	; 111
    1592:	f0 e0       	ldi	r31, 0x00	; 0
    1594:	03 c0       	rjmp	.+6      	; 0x159c <_fpadd_parts+0x288>
    1596:	fb 01       	movw	r30, r22
    1598:	01 c0       	rjmp	.+2      	; 0x159c <_fpadd_parts+0x288>
    159a:	fe 01       	movw	r30, r28
    159c:	cf 01       	movw	r24, r30
    159e:	cd b7       	in	r28, 0x3d	; 61
    15a0:	de b7       	in	r29, 0x3e	; 62
    15a2:	ee e0       	ldi	r30, 0x0E	; 14
    15a4:	0c 94 be 0e 	jmp	0x1d7c	; 0x1d7c <__epilogue_restores__+0x8>

000015a8 <__addsf3>:
    15a8:	a0 e2       	ldi	r26, 0x20	; 32
    15aa:	b0 e0       	ldi	r27, 0x00	; 0
    15ac:	ea ed       	ldi	r30, 0xDA	; 218
    15ae:	fa e0       	ldi	r31, 0x0A	; 10
    15b0:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__+0x18>
    15b4:	69 83       	std	Y+1, r22	; 0x01
    15b6:	7a 83       	std	Y+2, r23	; 0x02
    15b8:	8b 83       	std	Y+3, r24	; 0x03
    15ba:	9c 83       	std	Y+4, r25	; 0x04
    15bc:	2d 83       	std	Y+5, r18	; 0x05
    15be:	3e 83       	std	Y+6, r19	; 0x06
    15c0:	4f 83       	std	Y+7, r20	; 0x07
    15c2:	58 87       	std	Y+8, r21	; 0x08
    15c4:	89 e0       	ldi	r24, 0x09	; 9
    15c6:	e8 2e       	mov	r14, r24
    15c8:	f1 2c       	mov	r15, r1
    15ca:	ec 0e       	add	r14, r28
    15cc:	fd 1e       	adc	r15, r29
    15ce:	ce 01       	movw	r24, r28
    15d0:	01 96       	adiw	r24, 0x01	; 1
    15d2:	b7 01       	movw	r22, r14
    15d4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    15d8:	8e 01       	movw	r16, r28
    15da:	0f 5e       	subi	r16, 0xEF	; 239
    15dc:	1f 4f       	sbci	r17, 0xFF	; 255
    15de:	ce 01       	movw	r24, r28
    15e0:	05 96       	adiw	r24, 0x05	; 5
    15e2:	b8 01       	movw	r22, r16
    15e4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    15e8:	c7 01       	movw	r24, r14
    15ea:	b8 01       	movw	r22, r16
    15ec:	ae 01       	movw	r20, r28
    15ee:	47 5e       	subi	r20, 0xE7	; 231
    15f0:	5f 4f       	sbci	r21, 0xFF	; 255
    15f2:	0e 94 8a 09 	call	0x1314	; 0x1314 <_fpadd_parts>
    15f6:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__pack_f>
    15fa:	a0 96       	adiw	r28, 0x20	; 32
    15fc:	e6 e0       	ldi	r30, 0x06	; 6
    15fe:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x18>

00001602 <__subsf3>:
    1602:	a0 e2       	ldi	r26, 0x20	; 32
    1604:	b0 e0       	ldi	r27, 0x00	; 0
    1606:	e7 e0       	ldi	r30, 0x07	; 7
    1608:	fb e0       	ldi	r31, 0x0B	; 11
    160a:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__+0x18>
    160e:	69 83       	std	Y+1, r22	; 0x01
    1610:	7a 83       	std	Y+2, r23	; 0x02
    1612:	8b 83       	std	Y+3, r24	; 0x03
    1614:	9c 83       	std	Y+4, r25	; 0x04
    1616:	2d 83       	std	Y+5, r18	; 0x05
    1618:	3e 83       	std	Y+6, r19	; 0x06
    161a:	4f 83       	std	Y+7, r20	; 0x07
    161c:	58 87       	std	Y+8, r21	; 0x08
    161e:	8e 01       	movw	r16, r28
    1620:	07 5f       	subi	r16, 0xF7	; 247
    1622:	1f 4f       	sbci	r17, 0xFF	; 255
    1624:	ce 01       	movw	r24, r28
    1626:	01 96       	adiw	r24, 0x01	; 1
    1628:	b8 01       	movw	r22, r16
    162a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    162e:	91 e1       	ldi	r25, 0x11	; 17
    1630:	e9 2e       	mov	r14, r25
    1632:	f1 2c       	mov	r15, r1
    1634:	ec 0e       	add	r14, r28
    1636:	fd 1e       	adc	r15, r29
    1638:	ce 01       	movw	r24, r28
    163a:	05 96       	adiw	r24, 0x05	; 5
    163c:	b7 01       	movw	r22, r14
    163e:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    1642:	8a 89       	ldd	r24, Y+18	; 0x12
    1644:	91 e0       	ldi	r25, 0x01	; 1
    1646:	89 27       	eor	r24, r25
    1648:	8a 8b       	std	Y+18, r24	; 0x12
    164a:	c8 01       	movw	r24, r16
    164c:	b7 01       	movw	r22, r14
    164e:	ae 01       	movw	r20, r28
    1650:	47 5e       	subi	r20, 0xE7	; 231
    1652:	5f 4f       	sbci	r21, 0xFF	; 255
    1654:	0e 94 8a 09 	call	0x1314	; 0x1314 <_fpadd_parts>
    1658:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__pack_f>
    165c:	a0 96       	adiw	r28, 0x20	; 32
    165e:	e6 e0       	ldi	r30, 0x06	; 6
    1660:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x18>

00001664 <__mulsf3>:
    1664:	a0 e2       	ldi	r26, 0x20	; 32
    1666:	b0 e0       	ldi	r27, 0x00	; 0
    1668:	e8 e3       	ldi	r30, 0x38	; 56
    166a:	fb e0       	ldi	r31, 0x0B	; 11
    166c:	0c 94 9e 0e 	jmp	0x1d3c	; 0x1d3c <__prologue_saves__>
    1670:	69 83       	std	Y+1, r22	; 0x01
    1672:	7a 83       	std	Y+2, r23	; 0x02
    1674:	8b 83       	std	Y+3, r24	; 0x03
    1676:	9c 83       	std	Y+4, r25	; 0x04
    1678:	2d 83       	std	Y+5, r18	; 0x05
    167a:	3e 83       	std	Y+6, r19	; 0x06
    167c:	4f 83       	std	Y+7, r20	; 0x07
    167e:	58 87       	std	Y+8, r21	; 0x08
    1680:	ce 01       	movw	r24, r28
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	be 01       	movw	r22, r28
    1686:	67 5f       	subi	r22, 0xF7	; 247
    1688:	7f 4f       	sbci	r23, 0xFF	; 255
    168a:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    168e:	ce 01       	movw	r24, r28
    1690:	05 96       	adiw	r24, 0x05	; 5
    1692:	be 01       	movw	r22, r28
    1694:	6f 5e       	subi	r22, 0xEF	; 239
    1696:	7f 4f       	sbci	r23, 0xFF	; 255
    1698:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    169c:	99 85       	ldd	r25, Y+9	; 0x09
    169e:	92 30       	cpi	r25, 0x02	; 2
    16a0:	78 f0       	brcs	.+30     	; 0x16c0 <__mulsf3+0x5c>
    16a2:	89 89       	ldd	r24, Y+17	; 0x11
    16a4:	82 30       	cpi	r24, 0x02	; 2
    16a6:	c0 f0       	brcs	.+48     	; 0x16d8 <__mulsf3+0x74>
    16a8:	94 30       	cpi	r25, 0x04	; 4
    16aa:	19 f4       	brne	.+6      	; 0x16b2 <__mulsf3+0x4e>
    16ac:	82 30       	cpi	r24, 0x02	; 2
    16ae:	41 f4       	brne	.+16     	; 0x16c0 <__mulsf3+0x5c>
    16b0:	cb c0       	rjmp	.+406    	; 0x1848 <__mulsf3+0x1e4>
    16b2:	84 30       	cpi	r24, 0x04	; 4
    16b4:	19 f4       	brne	.+6      	; 0x16bc <__mulsf3+0x58>
    16b6:	92 30       	cpi	r25, 0x02	; 2
    16b8:	79 f4       	brne	.+30     	; 0x16d8 <__mulsf3+0x74>
    16ba:	c6 c0       	rjmp	.+396    	; 0x1848 <__mulsf3+0x1e4>
    16bc:	92 30       	cpi	r25, 0x02	; 2
    16be:	51 f4       	brne	.+20     	; 0x16d4 <__mulsf3+0x70>
    16c0:	81 e0       	ldi	r24, 0x01	; 1
    16c2:	2a 85       	ldd	r18, Y+10	; 0x0a
    16c4:	9a 89       	ldd	r25, Y+18	; 0x12
    16c6:	29 17       	cp	r18, r25
    16c8:	09 f4       	brne	.+2      	; 0x16cc <__mulsf3+0x68>
    16ca:	80 e0       	ldi	r24, 0x00	; 0
    16cc:	8a 87       	std	Y+10, r24	; 0x0a
    16ce:	ce 01       	movw	r24, r28
    16d0:	09 96       	adiw	r24, 0x09	; 9
    16d2:	bc c0       	rjmp	.+376    	; 0x184c <__mulsf3+0x1e8>
    16d4:	82 30       	cpi	r24, 0x02	; 2
    16d6:	51 f4       	brne	.+20     	; 0x16ec <__mulsf3+0x88>
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	2a 85       	ldd	r18, Y+10	; 0x0a
    16dc:	9a 89       	ldd	r25, Y+18	; 0x12
    16de:	29 17       	cp	r18, r25
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <__mulsf3+0x80>
    16e2:	80 e0       	ldi	r24, 0x00	; 0
    16e4:	8a 8b       	std	Y+18, r24	; 0x12
    16e6:	ce 01       	movw	r24, r28
    16e8:	41 96       	adiw	r24, 0x11	; 17
    16ea:	b0 c0       	rjmp	.+352    	; 0x184c <__mulsf3+0x1e8>
    16ec:	6d 84       	ldd	r6, Y+13	; 0x0d
    16ee:	7e 84       	ldd	r7, Y+14	; 0x0e
    16f0:	8f 84       	ldd	r8, Y+15	; 0x0f
    16f2:	98 88       	ldd	r9, Y+16	; 0x10
    16f4:	ed 88       	ldd	r14, Y+21	; 0x15
    16f6:	fe 88       	ldd	r15, Y+22	; 0x16
    16f8:	0f 89       	ldd	r16, Y+23	; 0x17
    16fa:	18 8d       	ldd	r17, Y+24	; 0x18
    16fc:	e0 e2       	ldi	r30, 0x20	; 32
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	80 e0       	ldi	r24, 0x00	; 0
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	dc 01       	movw	r26, r24
    1706:	aa 24       	eor	r10, r10
    1708:	bb 24       	eor	r11, r11
    170a:	65 01       	movw	r12, r10
    170c:	20 e0       	ldi	r18, 0x00	; 0
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	a9 01       	movw	r20, r18
    1712:	b3 01       	movw	r22, r6
    1714:	61 70       	andi	r22, 0x01	; 1
    1716:	70 70       	andi	r23, 0x00	; 0
    1718:	61 15       	cp	r22, r1
    171a:	71 05       	cpc	r23, r1
    171c:	d1 f0       	breq	.+52     	; 0x1752 <__mulsf3+0xee>
    171e:	2e 0d       	add	r18, r14
    1720:	3f 1d       	adc	r19, r15
    1722:	40 1f       	adc	r20, r16
    1724:	51 1f       	adc	r21, r17
    1726:	15 01       	movw	r2, r10
    1728:	26 01       	movw	r4, r12
    172a:	28 0e       	add	r2, r24
    172c:	39 1e       	adc	r3, r25
    172e:	4a 1e       	adc	r4, r26
    1730:	5b 1e       	adc	r5, r27
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e0       	ldi	r26, 0x00	; 0
    1738:	b0 e0       	ldi	r27, 0x00	; 0
    173a:	2e 15       	cp	r18, r14
    173c:	3f 05       	cpc	r19, r15
    173e:	40 07       	cpc	r20, r16
    1740:	51 07       	cpc	r21, r17
    1742:	18 f0       	brcs	.+6      	; 0x174a <__mulsf3+0xe6>
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	dc 01       	movw	r26, r24
    174a:	82 0d       	add	r24, r2
    174c:	93 1d       	adc	r25, r3
    174e:	a4 1d       	adc	r26, r4
    1750:	b5 1d       	adc	r27, r5
    1752:	aa 0c       	add	r10, r10
    1754:	bb 1c       	adc	r11, r11
    1756:	cc 1c       	adc	r12, r12
    1758:	dd 1c       	adc	r13, r13
    175a:	17 ff       	sbrs	r17, 7
    175c:	09 c0       	rjmp	.+18     	; 0x1770 <__mulsf3+0x10c>
    175e:	61 e0       	ldi	r22, 0x01	; 1
    1760:	26 2e       	mov	r2, r22
    1762:	31 2c       	mov	r3, r1
    1764:	41 2c       	mov	r4, r1
    1766:	51 2c       	mov	r5, r1
    1768:	a2 28       	or	r10, r2
    176a:	b3 28       	or	r11, r3
    176c:	c4 28       	or	r12, r4
    176e:	d5 28       	or	r13, r5
    1770:	31 97       	sbiw	r30, 0x01	; 1
    1772:	49 f0       	breq	.+18     	; 0x1786 <__mulsf3+0x122>
    1774:	ee 0c       	add	r14, r14
    1776:	ff 1c       	adc	r15, r15
    1778:	00 1f       	adc	r16, r16
    177a:	11 1f       	adc	r17, r17
    177c:	96 94       	lsr	r9
    177e:	87 94       	ror	r8
    1780:	77 94       	ror	r7
    1782:	67 94       	ror	r6
    1784:	c6 cf       	rjmp	.-116    	; 0x1712 <__mulsf3+0xae>
    1786:	6b 89       	ldd	r22, Y+19	; 0x13
    1788:	7c 89       	ldd	r23, Y+20	; 0x14
    178a:	eb 85       	ldd	r30, Y+11	; 0x0b
    178c:	fc 85       	ldd	r31, Y+12	; 0x0c
    178e:	6e 0f       	add	r22, r30
    1790:	7f 1f       	adc	r23, r31
    1792:	6e 5f       	subi	r22, 0xFE	; 254
    1794:	7f 4f       	sbci	r23, 0xFF	; 255
    1796:	7c 8f       	std	Y+28, r23	; 0x1c
    1798:	6b 8f       	std	Y+27, r22	; 0x1b
    179a:	61 e0       	ldi	r22, 0x01	; 1
    179c:	ea 85       	ldd	r30, Y+10	; 0x0a
    179e:	7a 89       	ldd	r23, Y+18	; 0x12
    17a0:	e7 17       	cp	r30, r23
    17a2:	09 f4       	brne	.+2      	; 0x17a6 <__mulsf3+0x142>
    17a4:	60 e0       	ldi	r22, 0x00	; 0
    17a6:	6a 8f       	std	Y+26, r22	; 0x1a
    17a8:	6b 8d       	ldd	r22, Y+27	; 0x1b
    17aa:	7c 8d       	ldd	r23, Y+28	; 0x1c
    17ac:	10 c0       	rjmp	.+32     	; 0x17ce <__mulsf3+0x16a>
    17ae:	fc 01       	movw	r30, r24
    17b0:	e1 70       	andi	r30, 0x01	; 1
    17b2:	f0 70       	andi	r31, 0x00	; 0
    17b4:	30 97       	sbiw	r30, 0x00	; 0
    17b6:	29 f0       	breq	.+10     	; 0x17c2 <__mulsf3+0x15e>
    17b8:	56 95       	lsr	r21
    17ba:	47 95       	ror	r20
    17bc:	37 95       	ror	r19
    17be:	27 95       	ror	r18
    17c0:	50 68       	ori	r21, 0x80	; 128
    17c2:	b6 95       	lsr	r27
    17c4:	a7 95       	ror	r26
    17c6:	97 95       	ror	r25
    17c8:	87 95       	ror	r24
    17ca:	6f 5f       	subi	r22, 0xFF	; 255
    17cc:	7f 4f       	sbci	r23, 0xFF	; 255
    17ce:	b7 fd       	sbrc	r27, 7
    17d0:	ee cf       	rjmp	.-36     	; 0x17ae <__mulsf3+0x14a>
    17d2:	0c c0       	rjmp	.+24     	; 0x17ec <__mulsf3+0x188>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	aa 1f       	adc	r26, r26
    17da:	bb 1f       	adc	r27, r27
    17dc:	57 fd       	sbrc	r21, 7
    17de:	81 60       	ori	r24, 0x01	; 1
    17e0:	22 0f       	add	r18, r18
    17e2:	33 1f       	adc	r19, r19
    17e4:	44 1f       	adc	r20, r20
    17e6:	55 1f       	adc	r21, r21
    17e8:	61 50       	subi	r22, 0x01	; 1
    17ea:	70 40       	sbci	r23, 0x00	; 0
    17ec:	80 30       	cpi	r24, 0x00	; 0
    17ee:	e0 e0       	ldi	r30, 0x00	; 0
    17f0:	9e 07       	cpc	r25, r30
    17f2:	e0 e0       	ldi	r30, 0x00	; 0
    17f4:	ae 07       	cpc	r26, r30
    17f6:	e0 e4       	ldi	r30, 0x40	; 64
    17f8:	be 07       	cpc	r27, r30
    17fa:	60 f3       	brcs	.-40     	; 0x17d4 <__mulsf3+0x170>
    17fc:	6b 8f       	std	Y+27, r22	; 0x1b
    17fe:	7c 8f       	std	Y+28, r23	; 0x1c
    1800:	6f e7       	ldi	r22, 0x7F	; 127
    1802:	e6 2e       	mov	r14, r22
    1804:	f1 2c       	mov	r15, r1
    1806:	01 2d       	mov	r16, r1
    1808:	11 2d       	mov	r17, r1
    180a:	e8 22       	and	r14, r24
    180c:	f9 22       	and	r15, r25
    180e:	0a 23       	and	r16, r26
    1810:	1b 23       	and	r17, r27
    1812:	60 e4       	ldi	r22, 0x40	; 64
    1814:	e6 16       	cp	r14, r22
    1816:	f1 04       	cpc	r15, r1
    1818:	01 05       	cpc	r16, r1
    181a:	11 05       	cpc	r17, r1
    181c:	61 f4       	brne	.+24     	; 0x1836 <__mulsf3+0x1d2>
    181e:	87 fd       	sbrc	r24, 7
    1820:	0a c0       	rjmp	.+20     	; 0x1836 <__mulsf3+0x1d2>
    1822:	21 15       	cp	r18, r1
    1824:	31 05       	cpc	r19, r1
    1826:	41 05       	cpc	r20, r1
    1828:	51 05       	cpc	r21, r1
    182a:	29 f0       	breq	.+10     	; 0x1836 <__mulsf3+0x1d2>
    182c:	80 5c       	subi	r24, 0xC0	; 192
    182e:	9f 4f       	sbci	r25, 0xFF	; 255
    1830:	af 4f       	sbci	r26, 0xFF	; 255
    1832:	bf 4f       	sbci	r27, 0xFF	; 255
    1834:	80 78       	andi	r24, 0x80	; 128
    1836:	8d 8f       	std	Y+29, r24	; 0x1d
    1838:	9e 8f       	std	Y+30, r25	; 0x1e
    183a:	af 8f       	std	Y+31, r26	; 0x1f
    183c:	b8 a3       	std	Y+32, r27	; 0x20
    183e:	83 e0       	ldi	r24, 0x03	; 3
    1840:	89 8f       	std	Y+25, r24	; 0x19
    1842:	ce 01       	movw	r24, r28
    1844:	49 96       	adiw	r24, 0x19	; 25
    1846:	02 c0       	rjmp	.+4      	; 0x184c <__mulsf3+0x1e8>
    1848:	8f e6       	ldi	r24, 0x6F	; 111
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <__pack_f>
    1850:	a0 96       	adiw	r28, 0x20	; 32
    1852:	e2 e1       	ldi	r30, 0x12	; 18
    1854:	0c 94 ba 0e 	jmp	0x1d74	; 0x1d74 <__epilogue_restores__>

00001858 <__gtsf2>:
    1858:	a8 e1       	ldi	r26, 0x18	; 24
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e2 e3       	ldi	r30, 0x32	; 50
    185e:	fc e0       	ldi	r31, 0x0C	; 12
    1860:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__+0x18>
    1864:	69 83       	std	Y+1, r22	; 0x01
    1866:	7a 83       	std	Y+2, r23	; 0x02
    1868:	8b 83       	std	Y+3, r24	; 0x03
    186a:	9c 83       	std	Y+4, r25	; 0x04
    186c:	2d 83       	std	Y+5, r18	; 0x05
    186e:	3e 83       	std	Y+6, r19	; 0x06
    1870:	4f 83       	std	Y+7, r20	; 0x07
    1872:	58 87       	std	Y+8, r21	; 0x08
    1874:	8e 01       	movw	r16, r28
    1876:	07 5f       	subi	r16, 0xF7	; 247
    1878:	1f 4f       	sbci	r17, 0xFF	; 255
    187a:	ce 01       	movw	r24, r28
    187c:	01 96       	adiw	r24, 0x01	; 1
    187e:	b8 01       	movw	r22, r16
    1880:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    1884:	81 e1       	ldi	r24, 0x11	; 17
    1886:	e8 2e       	mov	r14, r24
    1888:	f1 2c       	mov	r15, r1
    188a:	ec 0e       	add	r14, r28
    188c:	fd 1e       	adc	r15, r29
    188e:	ce 01       	movw	r24, r28
    1890:	05 96       	adiw	r24, 0x05	; 5
    1892:	b7 01       	movw	r22, r14
    1894:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    1898:	89 85       	ldd	r24, Y+9	; 0x09
    189a:	82 30       	cpi	r24, 0x02	; 2
    189c:	40 f0       	brcs	.+16     	; 0x18ae <__gtsf2+0x56>
    189e:	89 89       	ldd	r24, Y+17	; 0x11
    18a0:	82 30       	cpi	r24, 0x02	; 2
    18a2:	28 f0       	brcs	.+10     	; 0x18ae <__gtsf2+0x56>
    18a4:	c8 01       	movw	r24, r16
    18a6:	b7 01       	movw	r22, r14
    18a8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__fpcmp_parts_f>
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <__gtsf2+0x58>
    18ae:	8f ef       	ldi	r24, 0xFF	; 255
    18b0:	68 96       	adiw	r28, 0x18	; 24
    18b2:	e6 e0       	ldi	r30, 0x06	; 6
    18b4:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x18>

000018b8 <__gesf2>:
    18b8:	a8 e1       	ldi	r26, 0x18	; 24
    18ba:	b0 e0       	ldi	r27, 0x00	; 0
    18bc:	e2 e6       	ldi	r30, 0x62	; 98
    18be:	fc e0       	ldi	r31, 0x0C	; 12
    18c0:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__+0x18>
    18c4:	69 83       	std	Y+1, r22	; 0x01
    18c6:	7a 83       	std	Y+2, r23	; 0x02
    18c8:	8b 83       	std	Y+3, r24	; 0x03
    18ca:	9c 83       	std	Y+4, r25	; 0x04
    18cc:	2d 83       	std	Y+5, r18	; 0x05
    18ce:	3e 83       	std	Y+6, r19	; 0x06
    18d0:	4f 83       	std	Y+7, r20	; 0x07
    18d2:	58 87       	std	Y+8, r21	; 0x08
    18d4:	8e 01       	movw	r16, r28
    18d6:	07 5f       	subi	r16, 0xF7	; 247
    18d8:	1f 4f       	sbci	r17, 0xFF	; 255
    18da:	ce 01       	movw	r24, r28
    18dc:	01 96       	adiw	r24, 0x01	; 1
    18de:	b8 01       	movw	r22, r16
    18e0:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    18e4:	81 e1       	ldi	r24, 0x11	; 17
    18e6:	e8 2e       	mov	r14, r24
    18e8:	f1 2c       	mov	r15, r1
    18ea:	ec 0e       	add	r14, r28
    18ec:	fd 1e       	adc	r15, r29
    18ee:	ce 01       	movw	r24, r28
    18f0:	05 96       	adiw	r24, 0x05	; 5
    18f2:	b7 01       	movw	r22, r14
    18f4:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    18f8:	89 85       	ldd	r24, Y+9	; 0x09
    18fa:	82 30       	cpi	r24, 0x02	; 2
    18fc:	40 f0       	brcs	.+16     	; 0x190e <__gesf2+0x56>
    18fe:	89 89       	ldd	r24, Y+17	; 0x11
    1900:	82 30       	cpi	r24, 0x02	; 2
    1902:	28 f0       	brcs	.+10     	; 0x190e <__gesf2+0x56>
    1904:	c8 01       	movw	r24, r16
    1906:	b7 01       	movw	r22, r14
    1908:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__fpcmp_parts_f>
    190c:	01 c0       	rjmp	.+2      	; 0x1910 <__gesf2+0x58>
    190e:	8f ef       	ldi	r24, 0xFF	; 255
    1910:	68 96       	adiw	r28, 0x18	; 24
    1912:	e6 e0       	ldi	r30, 0x06	; 6
    1914:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x18>

00001918 <__ltsf2>:
    1918:	a8 e1       	ldi	r26, 0x18	; 24
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	e2 e9       	ldi	r30, 0x92	; 146
    191e:	fc e0       	ldi	r31, 0x0C	; 12
    1920:	0c 94 aa 0e 	jmp	0x1d54	; 0x1d54 <__prologue_saves__+0x18>
    1924:	69 83       	std	Y+1, r22	; 0x01
    1926:	7a 83       	std	Y+2, r23	; 0x02
    1928:	8b 83       	std	Y+3, r24	; 0x03
    192a:	9c 83       	std	Y+4, r25	; 0x04
    192c:	2d 83       	std	Y+5, r18	; 0x05
    192e:	3e 83       	std	Y+6, r19	; 0x06
    1930:	4f 83       	std	Y+7, r20	; 0x07
    1932:	58 87       	std	Y+8, r21	; 0x08
    1934:	8e 01       	movw	r16, r28
    1936:	07 5f       	subi	r16, 0xF7	; 247
    1938:	1f 4f       	sbci	r17, 0xFF	; 255
    193a:	ce 01       	movw	r24, r28
    193c:	01 96       	adiw	r24, 0x01	; 1
    193e:	b8 01       	movw	r22, r16
    1940:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    1944:	81 e1       	ldi	r24, 0x11	; 17
    1946:	e8 2e       	mov	r14, r24
    1948:	f1 2c       	mov	r15, r1
    194a:	ec 0e       	add	r14, r28
    194c:	fd 1e       	adc	r15, r29
    194e:	ce 01       	movw	r24, r28
    1950:	05 96       	adiw	r24, 0x05	; 5
    1952:	b7 01       	movw	r22, r14
    1954:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    1958:	89 85       	ldd	r24, Y+9	; 0x09
    195a:	82 30       	cpi	r24, 0x02	; 2
    195c:	40 f0       	brcs	.+16     	; 0x196e <__ltsf2+0x56>
    195e:	89 89       	ldd	r24, Y+17	; 0x11
    1960:	82 30       	cpi	r24, 0x02	; 2
    1962:	28 f0       	brcs	.+10     	; 0x196e <__ltsf2+0x56>
    1964:	c8 01       	movw	r24, r16
    1966:	b7 01       	movw	r22, r14
    1968:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <__fpcmp_parts_f>
    196c:	01 c0       	rjmp	.+2      	; 0x1970 <__ltsf2+0x58>
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	68 96       	adiw	r28, 0x18	; 24
    1972:	e6 e0       	ldi	r30, 0x06	; 6
    1974:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x18>

00001978 <__fixsfsi>:
    1978:	ac e0       	ldi	r26, 0x0C	; 12
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e2 ec       	ldi	r30, 0xC2	; 194
    197e:	fc e0       	ldi	r31, 0x0C	; 12
    1980:	0c 94 ae 0e 	jmp	0x1d5c	; 0x1d5c <__prologue_saves__+0x20>
    1984:	69 83       	std	Y+1, r22	; 0x01
    1986:	7a 83       	std	Y+2, r23	; 0x02
    1988:	8b 83       	std	Y+3, r24	; 0x03
    198a:	9c 83       	std	Y+4, r25	; 0x04
    198c:	ce 01       	movw	r24, r28
    198e:	01 96       	adiw	r24, 0x01	; 1
    1990:	be 01       	movw	r22, r28
    1992:	6b 5f       	subi	r22, 0xFB	; 251
    1994:	7f 4f       	sbci	r23, 0xFF	; 255
    1996:	0e 94 dc 0d 	call	0x1bb8	; 0x1bb8 <__unpack_f>
    199a:	8d 81       	ldd	r24, Y+5	; 0x05
    199c:	82 30       	cpi	r24, 0x02	; 2
    199e:	81 f1       	breq	.+96     	; 0x1a00 <__fixsfsi+0x88>
    19a0:	82 30       	cpi	r24, 0x02	; 2
    19a2:	70 f1       	brcs	.+92     	; 0x1a00 <__fixsfsi+0x88>
    19a4:	84 30       	cpi	r24, 0x04	; 4
    19a6:	21 f4       	brne	.+8      	; 0x19b0 <__fixsfsi+0x38>
    19a8:	8e 81       	ldd	r24, Y+6	; 0x06
    19aa:	88 23       	and	r24, r24
    19ac:	69 f1       	breq	.+90     	; 0x1a08 <__fixsfsi+0x90>
    19ae:	0a c0       	rjmp	.+20     	; 0x19c4 <__fixsfsi+0x4c>
    19b0:	2f 81       	ldd	r18, Y+7	; 0x07
    19b2:	38 85       	ldd	r19, Y+8	; 0x08
    19b4:	37 fd       	sbrc	r19, 7
    19b6:	24 c0       	rjmp	.+72     	; 0x1a00 <__fixsfsi+0x88>
    19b8:	6e 81       	ldd	r22, Y+6	; 0x06
    19ba:	2f 31       	cpi	r18, 0x1F	; 31
    19bc:	31 05       	cpc	r19, r1
    19be:	3c f0       	brlt	.+14     	; 0x19ce <__fixsfsi+0x56>
    19c0:	66 23       	and	r22, r22
    19c2:	11 f1       	breq	.+68     	; 0x1a08 <__fixsfsi+0x90>
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	30 e0       	ldi	r19, 0x00	; 0
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	50 e8       	ldi	r21, 0x80	; 128
    19cc:	21 c0       	rjmp	.+66     	; 0x1a10 <__fixsfsi+0x98>
    19ce:	8e e1       	ldi	r24, 0x1E	; 30
    19d0:	90 e0       	ldi	r25, 0x00	; 0
    19d2:	82 1b       	sub	r24, r18
    19d4:	93 0b       	sbc	r25, r19
    19d6:	29 85       	ldd	r18, Y+9	; 0x09
    19d8:	3a 85       	ldd	r19, Y+10	; 0x0a
    19da:	4b 85       	ldd	r20, Y+11	; 0x0b
    19dc:	5c 85       	ldd	r21, Y+12	; 0x0c
    19de:	04 c0       	rjmp	.+8      	; 0x19e8 <__fixsfsi+0x70>
    19e0:	56 95       	lsr	r21
    19e2:	47 95       	ror	r20
    19e4:	37 95       	ror	r19
    19e6:	27 95       	ror	r18
    19e8:	8a 95       	dec	r24
    19ea:	d2 f7       	brpl	.-12     	; 0x19e0 <__fixsfsi+0x68>
    19ec:	66 23       	and	r22, r22
    19ee:	81 f0       	breq	.+32     	; 0x1a10 <__fixsfsi+0x98>
    19f0:	50 95       	com	r21
    19f2:	40 95       	com	r20
    19f4:	30 95       	com	r19
    19f6:	21 95       	neg	r18
    19f8:	3f 4f       	sbci	r19, 0xFF	; 255
    19fa:	4f 4f       	sbci	r20, 0xFF	; 255
    19fc:	5f 4f       	sbci	r21, 0xFF	; 255
    19fe:	08 c0       	rjmp	.+16     	; 0x1a10 <__fixsfsi+0x98>
    1a00:	20 e0       	ldi	r18, 0x00	; 0
    1a02:	30 e0       	ldi	r19, 0x00	; 0
    1a04:	a9 01       	movw	r20, r18
    1a06:	04 c0       	rjmp	.+8      	; 0x1a10 <__fixsfsi+0x98>
    1a08:	2f ef       	ldi	r18, 0xFF	; 255
    1a0a:	3f ef       	ldi	r19, 0xFF	; 255
    1a0c:	4f ef       	ldi	r20, 0xFF	; 255
    1a0e:	5f e7       	ldi	r21, 0x7F	; 127
    1a10:	b9 01       	movw	r22, r18
    1a12:	ca 01       	movw	r24, r20
    1a14:	2c 96       	adiw	r28, 0x0c	; 12
    1a16:	e2 e0       	ldi	r30, 0x02	; 2
    1a18:	0c 94 ca 0e 	jmp	0x1d94	; 0x1d94 <__epilogue_restores__+0x20>

00001a1c <__pack_f>:
    1a1c:	ef 92       	push	r14
    1a1e:	ff 92       	push	r15
    1a20:	0f 93       	push	r16
    1a22:	1f 93       	push	r17
    1a24:	cf 93       	push	r28
    1a26:	df 93       	push	r29
    1a28:	fc 01       	movw	r30, r24
    1a2a:	24 81       	ldd	r18, Z+4	; 0x04
    1a2c:	35 81       	ldd	r19, Z+5	; 0x05
    1a2e:	46 81       	ldd	r20, Z+6	; 0x06
    1a30:	57 81       	ldd	r21, Z+7	; 0x07
    1a32:	61 81       	ldd	r22, Z+1	; 0x01
    1a34:	80 81       	ld	r24, Z
    1a36:	82 30       	cpi	r24, 0x02	; 2
    1a38:	20 f4       	brcc	.+8      	; 0x1a42 <__pack_f+0x26>
    1a3a:	40 61       	ori	r20, 0x10	; 16
    1a3c:	ef ef       	ldi	r30, 0xFF	; 255
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	a3 c0       	rjmp	.+326    	; 0x1b88 <__pack_f+0x16c>
    1a42:	84 30       	cpi	r24, 0x04	; 4
    1a44:	09 f4       	brne	.+2      	; 0x1a48 <__pack_f+0x2c>
    1a46:	9b c0       	rjmp	.+310    	; 0x1b7e <__pack_f+0x162>
    1a48:	82 30       	cpi	r24, 0x02	; 2
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <__pack_f+0x32>
    1a4c:	92 c0       	rjmp	.+292    	; 0x1b72 <__pack_f+0x156>
    1a4e:	21 15       	cp	r18, r1
    1a50:	31 05       	cpc	r19, r1
    1a52:	41 05       	cpc	r20, r1
    1a54:	51 05       	cpc	r21, r1
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <__pack_f+0x3e>
    1a58:	8f c0       	rjmp	.+286    	; 0x1b78 <__pack_f+0x15c>
    1a5a:	02 80       	ldd	r0, Z+2	; 0x02
    1a5c:	f3 81       	ldd	r31, Z+3	; 0x03
    1a5e:	e0 2d       	mov	r30, r0
    1a60:	8f ef       	ldi	r24, 0xFF	; 255
    1a62:	e2 38       	cpi	r30, 0x82	; 130
    1a64:	f8 07       	cpc	r31, r24
    1a66:	0c f0       	brlt	.+2      	; 0x1a6a <__pack_f+0x4e>
    1a68:	5a c0       	rjmp	.+180    	; 0x1b1e <__pack_f+0x102>
    1a6a:	c2 e8       	ldi	r28, 0x82	; 130
    1a6c:	df ef       	ldi	r29, 0xFF	; 255
    1a6e:	ce 1b       	sub	r28, r30
    1a70:	df 0b       	sbc	r29, r31
    1a72:	ca 31       	cpi	r28, 0x1A	; 26
    1a74:	d1 05       	cpc	r29, r1
    1a76:	6c f5       	brge	.+90     	; 0x1ad2 <__pack_f+0xb6>
    1a78:	79 01       	movw	r14, r18
    1a7a:	8a 01       	movw	r16, r20
    1a7c:	0c 2e       	mov	r0, r28
    1a7e:	04 c0       	rjmp	.+8      	; 0x1a88 <__pack_f+0x6c>
    1a80:	16 95       	lsr	r17
    1a82:	07 95       	ror	r16
    1a84:	f7 94       	ror	r15
    1a86:	e7 94       	ror	r14
    1a88:	0a 94       	dec	r0
    1a8a:	d2 f7       	brpl	.-12     	; 0x1a80 <__pack_f+0x64>
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	a0 e0       	ldi	r26, 0x00	; 0
    1a92:	b0 e0       	ldi	r27, 0x00	; 0
    1a94:	0c 2e       	mov	r0, r28
    1a96:	04 c0       	rjmp	.+8      	; 0x1aa0 <__pack_f+0x84>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	aa 1f       	adc	r26, r26
    1a9e:	bb 1f       	adc	r27, r27
    1aa0:	0a 94       	dec	r0
    1aa2:	d2 f7       	brpl	.-12     	; 0x1a98 <__pack_f+0x7c>
    1aa4:	01 97       	sbiw	r24, 0x01	; 1
    1aa6:	a1 09       	sbc	r26, r1
    1aa8:	b1 09       	sbc	r27, r1
    1aaa:	82 23       	and	r24, r18
    1aac:	93 23       	and	r25, r19
    1aae:	a4 23       	and	r26, r20
    1ab0:	b5 23       	and	r27, r21
    1ab2:	21 e0       	ldi	r18, 0x01	; 1
    1ab4:	30 e0       	ldi	r19, 0x00	; 0
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	00 97       	sbiw	r24, 0x00	; 0
    1abc:	a1 05       	cpc	r26, r1
    1abe:	b1 05       	cpc	r27, r1
    1ac0:	19 f4       	brne	.+6      	; 0x1ac8 <__pack_f+0xac>
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	a9 01       	movw	r20, r18
    1ac8:	2e 29       	or	r18, r14
    1aca:	3f 29       	or	r19, r15
    1acc:	40 2b       	or	r20, r16
    1ace:	51 2b       	or	r21, r17
    1ad0:	03 c0       	rjmp	.+6      	; 0x1ad8 <__pack_f+0xbc>
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	a9 01       	movw	r20, r18
    1ad8:	da 01       	movw	r26, r20
    1ada:	c9 01       	movw	r24, r18
    1adc:	8f 77       	andi	r24, 0x7F	; 127
    1ade:	90 70       	andi	r25, 0x00	; 0
    1ae0:	a0 70       	andi	r26, 0x00	; 0
    1ae2:	b0 70       	andi	r27, 0x00	; 0
    1ae4:	80 34       	cpi	r24, 0x40	; 64
    1ae6:	91 05       	cpc	r25, r1
    1ae8:	a1 05       	cpc	r26, r1
    1aea:	b1 05       	cpc	r27, r1
    1aec:	39 f4       	brne	.+14     	; 0x1afc <__pack_f+0xe0>
    1aee:	27 ff       	sbrs	r18, 7
    1af0:	09 c0       	rjmp	.+18     	; 0x1b04 <__pack_f+0xe8>
    1af2:	20 5c       	subi	r18, 0xC0	; 192
    1af4:	3f 4f       	sbci	r19, 0xFF	; 255
    1af6:	4f 4f       	sbci	r20, 0xFF	; 255
    1af8:	5f 4f       	sbci	r21, 0xFF	; 255
    1afa:	04 c0       	rjmp	.+8      	; 0x1b04 <__pack_f+0xe8>
    1afc:	21 5c       	subi	r18, 0xC1	; 193
    1afe:	3f 4f       	sbci	r19, 0xFF	; 255
    1b00:	4f 4f       	sbci	r20, 0xFF	; 255
    1b02:	5f 4f       	sbci	r21, 0xFF	; 255
    1b04:	e1 e0       	ldi	r30, 0x01	; 1
    1b06:	f0 e0       	ldi	r31, 0x00	; 0
    1b08:	20 30       	cpi	r18, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	38 07       	cpc	r19, r24
    1b0e:	80 e0       	ldi	r24, 0x00	; 0
    1b10:	48 07       	cpc	r20, r24
    1b12:	80 e4       	ldi	r24, 0x40	; 64
    1b14:	58 07       	cpc	r21, r24
    1b16:	28 f5       	brcc	.+74     	; 0x1b62 <__pack_f+0x146>
    1b18:	e0 e0       	ldi	r30, 0x00	; 0
    1b1a:	f0 e0       	ldi	r31, 0x00	; 0
    1b1c:	22 c0       	rjmp	.+68     	; 0x1b62 <__pack_f+0x146>
    1b1e:	e0 38       	cpi	r30, 0x80	; 128
    1b20:	f1 05       	cpc	r31, r1
    1b22:	6c f5       	brge	.+90     	; 0x1b7e <__pack_f+0x162>
    1b24:	e1 58       	subi	r30, 0x81	; 129
    1b26:	ff 4f       	sbci	r31, 0xFF	; 255
    1b28:	da 01       	movw	r26, r20
    1b2a:	c9 01       	movw	r24, r18
    1b2c:	8f 77       	andi	r24, 0x7F	; 127
    1b2e:	90 70       	andi	r25, 0x00	; 0
    1b30:	a0 70       	andi	r26, 0x00	; 0
    1b32:	b0 70       	andi	r27, 0x00	; 0
    1b34:	80 34       	cpi	r24, 0x40	; 64
    1b36:	91 05       	cpc	r25, r1
    1b38:	a1 05       	cpc	r26, r1
    1b3a:	b1 05       	cpc	r27, r1
    1b3c:	39 f4       	brne	.+14     	; 0x1b4c <__pack_f+0x130>
    1b3e:	27 ff       	sbrs	r18, 7
    1b40:	09 c0       	rjmp	.+18     	; 0x1b54 <__pack_f+0x138>
    1b42:	20 5c       	subi	r18, 0xC0	; 192
    1b44:	3f 4f       	sbci	r19, 0xFF	; 255
    1b46:	4f 4f       	sbci	r20, 0xFF	; 255
    1b48:	5f 4f       	sbci	r21, 0xFF	; 255
    1b4a:	04 c0       	rjmp	.+8      	; 0x1b54 <__pack_f+0x138>
    1b4c:	21 5c       	subi	r18, 0xC1	; 193
    1b4e:	3f 4f       	sbci	r19, 0xFF	; 255
    1b50:	4f 4f       	sbci	r20, 0xFF	; 255
    1b52:	5f 4f       	sbci	r21, 0xFF	; 255
    1b54:	57 ff       	sbrs	r21, 7
    1b56:	05 c0       	rjmp	.+10     	; 0x1b62 <__pack_f+0x146>
    1b58:	56 95       	lsr	r21
    1b5a:	47 95       	ror	r20
    1b5c:	37 95       	ror	r19
    1b5e:	27 95       	ror	r18
    1b60:	31 96       	adiw	r30, 0x01	; 1
    1b62:	87 e0       	ldi	r24, 0x07	; 7
    1b64:	56 95       	lsr	r21
    1b66:	47 95       	ror	r20
    1b68:	37 95       	ror	r19
    1b6a:	27 95       	ror	r18
    1b6c:	8a 95       	dec	r24
    1b6e:	d1 f7       	brne	.-12     	; 0x1b64 <__pack_f+0x148>
    1b70:	0b c0       	rjmp	.+22     	; 0x1b88 <__pack_f+0x16c>
    1b72:	e0 e0       	ldi	r30, 0x00	; 0
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	05 c0       	rjmp	.+10     	; 0x1b82 <__pack_f+0x166>
    1b78:	e0 e0       	ldi	r30, 0x00	; 0
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	05 c0       	rjmp	.+10     	; 0x1b88 <__pack_f+0x16c>
    1b7e:	ef ef       	ldi	r30, 0xFF	; 255
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	20 e0       	ldi	r18, 0x00	; 0
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	a9 01       	movw	r20, r18
    1b88:	8e 2f       	mov	r24, r30
    1b8a:	87 95       	ror	r24
    1b8c:	88 27       	eor	r24, r24
    1b8e:	87 95       	ror	r24
    1b90:	94 2f       	mov	r25, r20
    1b92:	9f 77       	andi	r25, 0x7F	; 127
    1b94:	67 95       	ror	r22
    1b96:	66 27       	eor	r22, r22
    1b98:	67 95       	ror	r22
    1b9a:	e6 95       	lsr	r30
    1b9c:	e2 2e       	mov	r14, r18
    1b9e:	a9 2f       	mov	r26, r25
    1ba0:	a8 2b       	or	r26, r24
    1ba2:	fe 2f       	mov	r31, r30
    1ba4:	f6 2b       	or	r31, r22
    1ba6:	62 2f       	mov	r22, r18
    1ba8:	73 2f       	mov	r23, r19
    1baa:	8a 2f       	mov	r24, r26
    1bac:	9f 2f       	mov	r25, r31
    1bae:	cd b7       	in	r28, 0x3d	; 61
    1bb0:	de b7       	in	r29, 0x3e	; 62
    1bb2:	e6 e0       	ldi	r30, 0x06	; 6
    1bb4:	0c 94 c6 0e 	jmp	0x1d8c	; 0x1d8c <__epilogue_restores__+0x18>

00001bb8 <__unpack_f>:
    1bb8:	dc 01       	movw	r26, r24
    1bba:	fb 01       	movw	r30, r22
    1bbc:	2c 91       	ld	r18, X
    1bbe:	11 96       	adiw	r26, 0x01	; 1
    1bc0:	3c 91       	ld	r19, X
    1bc2:	11 97       	sbiw	r26, 0x01	; 1
    1bc4:	12 96       	adiw	r26, 0x02	; 2
    1bc6:	8c 91       	ld	r24, X
    1bc8:	12 97       	sbiw	r26, 0x02	; 2
    1bca:	48 2f       	mov	r20, r24
    1bcc:	4f 77       	andi	r20, 0x7F	; 127
    1bce:	50 e0       	ldi	r21, 0x00	; 0
    1bd0:	98 2f       	mov	r25, r24
    1bd2:	99 1f       	adc	r25, r25
    1bd4:	99 27       	eor	r25, r25
    1bd6:	99 1f       	adc	r25, r25
    1bd8:	13 96       	adiw	r26, 0x03	; 3
    1bda:	6c 91       	ld	r22, X
    1bdc:	13 97       	sbiw	r26, 0x03	; 3
    1bde:	86 2f       	mov	r24, r22
    1be0:	88 0f       	add	r24, r24
    1be2:	89 2b       	or	r24, r25
    1be4:	90 e0       	ldi	r25, 0x00	; 0
    1be6:	66 1f       	adc	r22, r22
    1be8:	66 27       	eor	r22, r22
    1bea:	66 1f       	adc	r22, r22
    1bec:	61 83       	std	Z+1, r22	; 0x01
    1bee:	00 97       	sbiw	r24, 0x00	; 0
    1bf0:	39 f5       	brne	.+78     	; 0x1c40 <__unpack_f+0x88>
    1bf2:	21 15       	cp	r18, r1
    1bf4:	31 05       	cpc	r19, r1
    1bf6:	41 05       	cpc	r20, r1
    1bf8:	51 05       	cpc	r21, r1
    1bfa:	11 f4       	brne	.+4      	; 0x1c00 <__unpack_f+0x48>
    1bfc:	82 e0       	ldi	r24, 0x02	; 2
    1bfe:	29 c0       	rjmp	.+82     	; 0x1c52 <__unpack_f+0x9a>
    1c00:	82 e8       	ldi	r24, 0x82	; 130
    1c02:	9f ef       	ldi	r25, 0xFF	; 255
    1c04:	93 83       	std	Z+3, r25	; 0x03
    1c06:	82 83       	std	Z+2, r24	; 0x02
    1c08:	67 e0       	ldi	r22, 0x07	; 7
    1c0a:	22 0f       	add	r18, r18
    1c0c:	33 1f       	adc	r19, r19
    1c0e:	44 1f       	adc	r20, r20
    1c10:	55 1f       	adc	r21, r21
    1c12:	6a 95       	dec	r22
    1c14:	d1 f7       	brne	.-12     	; 0x1c0a <__unpack_f+0x52>
    1c16:	83 e0       	ldi	r24, 0x03	; 3
    1c18:	80 83       	st	Z, r24
    1c1a:	09 c0       	rjmp	.+18     	; 0x1c2e <__unpack_f+0x76>
    1c1c:	22 0f       	add	r18, r18
    1c1e:	33 1f       	adc	r19, r19
    1c20:	44 1f       	adc	r20, r20
    1c22:	55 1f       	adc	r21, r21
    1c24:	82 81       	ldd	r24, Z+2	; 0x02
    1c26:	93 81       	ldd	r25, Z+3	; 0x03
    1c28:	01 97       	sbiw	r24, 0x01	; 1
    1c2a:	93 83       	std	Z+3, r25	; 0x03
    1c2c:	82 83       	std	Z+2, r24	; 0x02
    1c2e:	20 30       	cpi	r18, 0x00	; 0
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	38 07       	cpc	r19, r24
    1c34:	80 e0       	ldi	r24, 0x00	; 0
    1c36:	48 07       	cpc	r20, r24
    1c38:	80 e4       	ldi	r24, 0x40	; 64
    1c3a:	58 07       	cpc	r21, r24
    1c3c:	78 f3       	brcs	.-34     	; 0x1c1c <__unpack_f+0x64>
    1c3e:	20 c0       	rjmp	.+64     	; 0x1c80 <__unpack_f+0xc8>
    1c40:	8f 3f       	cpi	r24, 0xFF	; 255
    1c42:	91 05       	cpc	r25, r1
    1c44:	79 f4       	brne	.+30     	; 0x1c64 <__unpack_f+0xac>
    1c46:	21 15       	cp	r18, r1
    1c48:	31 05       	cpc	r19, r1
    1c4a:	41 05       	cpc	r20, r1
    1c4c:	51 05       	cpc	r21, r1
    1c4e:	19 f4       	brne	.+6      	; 0x1c56 <__unpack_f+0x9e>
    1c50:	84 e0       	ldi	r24, 0x04	; 4
    1c52:	80 83       	st	Z, r24
    1c54:	08 95       	ret
    1c56:	44 ff       	sbrs	r20, 4
    1c58:	03 c0       	rjmp	.+6      	; 0x1c60 <__unpack_f+0xa8>
    1c5a:	81 e0       	ldi	r24, 0x01	; 1
    1c5c:	80 83       	st	Z, r24
    1c5e:	10 c0       	rjmp	.+32     	; 0x1c80 <__unpack_f+0xc8>
    1c60:	10 82       	st	Z, r1
    1c62:	0e c0       	rjmp	.+28     	; 0x1c80 <__unpack_f+0xc8>
    1c64:	8f 57       	subi	r24, 0x7F	; 127
    1c66:	90 40       	sbci	r25, 0x00	; 0
    1c68:	93 83       	std	Z+3, r25	; 0x03
    1c6a:	82 83       	std	Z+2, r24	; 0x02
    1c6c:	83 e0       	ldi	r24, 0x03	; 3
    1c6e:	80 83       	st	Z, r24
    1c70:	87 e0       	ldi	r24, 0x07	; 7
    1c72:	22 0f       	add	r18, r18
    1c74:	33 1f       	adc	r19, r19
    1c76:	44 1f       	adc	r20, r20
    1c78:	55 1f       	adc	r21, r21
    1c7a:	8a 95       	dec	r24
    1c7c:	d1 f7       	brne	.-12     	; 0x1c72 <__unpack_f+0xba>
    1c7e:	50 64       	ori	r21, 0x40	; 64
    1c80:	24 83       	std	Z+4, r18	; 0x04
    1c82:	35 83       	std	Z+5, r19	; 0x05
    1c84:	46 83       	std	Z+6, r20	; 0x06
    1c86:	57 83       	std	Z+7, r21	; 0x07
    1c88:	08 95       	ret

00001c8a <__fpcmp_parts_f>:
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	db 01       	movw	r26, r22
    1c8e:	90 81       	ld	r25, Z
    1c90:	92 30       	cpi	r25, 0x02	; 2
    1c92:	08 f4       	brcc	.+2      	; 0x1c96 <__fpcmp_parts_f+0xc>
    1c94:	49 c0       	rjmp	.+146    	; 0x1d28 <__fpcmp_parts_f+0x9e>
    1c96:	8c 91       	ld	r24, X
    1c98:	82 30       	cpi	r24, 0x02	; 2
    1c9a:	08 f4       	brcc	.+2      	; 0x1c9e <__fpcmp_parts_f+0x14>
    1c9c:	45 c0       	rjmp	.+138    	; 0x1d28 <__fpcmp_parts_f+0x9e>
    1c9e:	94 30       	cpi	r25, 0x04	; 4
    1ca0:	51 f4       	brne	.+20     	; 0x1cb6 <__fpcmp_parts_f+0x2c>
    1ca2:	61 81       	ldd	r22, Z+1	; 0x01
    1ca4:	84 30       	cpi	r24, 0x04	; 4
    1ca6:	b1 f5       	brne	.+108    	; 0x1d14 <__fpcmp_parts_f+0x8a>
    1ca8:	11 96       	adiw	r26, 0x01	; 1
    1caa:	2c 91       	ld	r18, X
    1cac:	11 97       	sbiw	r26, 0x01	; 1
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	26 1b       	sub	r18, r22
    1cb2:	31 09       	sbc	r19, r1
    1cb4:	41 c0       	rjmp	.+130    	; 0x1d38 <__fpcmp_parts_f+0xae>
    1cb6:	84 30       	cpi	r24, 0x04	; 4
    1cb8:	21 f0       	breq	.+8      	; 0x1cc2 <__fpcmp_parts_f+0x38>
    1cba:	92 30       	cpi	r25, 0x02	; 2
    1cbc:	41 f4       	brne	.+16     	; 0x1cce <__fpcmp_parts_f+0x44>
    1cbe:	82 30       	cpi	r24, 0x02	; 2
    1cc0:	b1 f1       	breq	.+108    	; 0x1d2e <__fpcmp_parts_f+0xa4>
    1cc2:	11 96       	adiw	r26, 0x01	; 1
    1cc4:	8c 91       	ld	r24, X
    1cc6:	11 97       	sbiw	r26, 0x01	; 1
    1cc8:	88 23       	and	r24, r24
    1cca:	a1 f1       	breq	.+104    	; 0x1d34 <__fpcmp_parts_f+0xaa>
    1ccc:	2d c0       	rjmp	.+90     	; 0x1d28 <__fpcmp_parts_f+0x9e>
    1cce:	61 81       	ldd	r22, Z+1	; 0x01
    1cd0:	82 30       	cpi	r24, 0x02	; 2
    1cd2:	01 f1       	breq	.+64     	; 0x1d14 <__fpcmp_parts_f+0x8a>
    1cd4:	11 96       	adiw	r26, 0x01	; 1
    1cd6:	8c 91       	ld	r24, X
    1cd8:	11 97       	sbiw	r26, 0x01	; 1
    1cda:	68 17       	cp	r22, r24
    1cdc:	d9 f4       	brne	.+54     	; 0x1d14 <__fpcmp_parts_f+0x8a>
    1cde:	22 81       	ldd	r18, Z+2	; 0x02
    1ce0:	33 81       	ldd	r19, Z+3	; 0x03
    1ce2:	12 96       	adiw	r26, 0x02	; 2
    1ce4:	8d 91       	ld	r24, X+
    1ce6:	9c 91       	ld	r25, X
    1ce8:	13 97       	sbiw	r26, 0x03	; 3
    1cea:	82 17       	cp	r24, r18
    1cec:	93 07       	cpc	r25, r19
    1cee:	94 f0       	brlt	.+36     	; 0x1d14 <__fpcmp_parts_f+0x8a>
    1cf0:	28 17       	cp	r18, r24
    1cf2:	39 07       	cpc	r19, r25
    1cf4:	bc f0       	brlt	.+46     	; 0x1d24 <__fpcmp_parts_f+0x9a>
    1cf6:	24 81       	ldd	r18, Z+4	; 0x04
    1cf8:	35 81       	ldd	r19, Z+5	; 0x05
    1cfa:	46 81       	ldd	r20, Z+6	; 0x06
    1cfc:	57 81       	ldd	r21, Z+7	; 0x07
    1cfe:	14 96       	adiw	r26, 0x04	; 4
    1d00:	8d 91       	ld	r24, X+
    1d02:	9d 91       	ld	r25, X+
    1d04:	0d 90       	ld	r0, X+
    1d06:	bc 91       	ld	r27, X
    1d08:	a0 2d       	mov	r26, r0
    1d0a:	82 17       	cp	r24, r18
    1d0c:	93 07       	cpc	r25, r19
    1d0e:	a4 07       	cpc	r26, r20
    1d10:	b5 07       	cpc	r27, r21
    1d12:	18 f4       	brcc	.+6      	; 0x1d1a <__fpcmp_parts_f+0x90>
    1d14:	66 23       	and	r22, r22
    1d16:	41 f0       	breq	.+16     	; 0x1d28 <__fpcmp_parts_f+0x9e>
    1d18:	0d c0       	rjmp	.+26     	; 0x1d34 <__fpcmp_parts_f+0xaa>
    1d1a:	28 17       	cp	r18, r24
    1d1c:	39 07       	cpc	r19, r25
    1d1e:	4a 07       	cpc	r20, r26
    1d20:	5b 07       	cpc	r21, r27
    1d22:	28 f4       	brcc	.+10     	; 0x1d2e <__fpcmp_parts_f+0xa4>
    1d24:	66 23       	and	r22, r22
    1d26:	31 f0       	breq	.+12     	; 0x1d34 <__fpcmp_parts_f+0xaa>
    1d28:	21 e0       	ldi	r18, 0x01	; 1
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	05 c0       	rjmp	.+10     	; 0x1d38 <__fpcmp_parts_f+0xae>
    1d2e:	20 e0       	ldi	r18, 0x00	; 0
    1d30:	30 e0       	ldi	r19, 0x00	; 0
    1d32:	02 c0       	rjmp	.+4      	; 0x1d38 <__fpcmp_parts_f+0xae>
    1d34:	2f ef       	ldi	r18, 0xFF	; 255
    1d36:	3f ef       	ldi	r19, 0xFF	; 255
    1d38:	c9 01       	movw	r24, r18
    1d3a:	08 95       	ret

00001d3c <__prologue_saves__>:
    1d3c:	2f 92       	push	r2
    1d3e:	3f 92       	push	r3
    1d40:	4f 92       	push	r4
    1d42:	5f 92       	push	r5
    1d44:	6f 92       	push	r6
    1d46:	7f 92       	push	r7
    1d48:	8f 92       	push	r8
    1d4a:	9f 92       	push	r9
    1d4c:	af 92       	push	r10
    1d4e:	bf 92       	push	r11
    1d50:	cf 92       	push	r12
    1d52:	df 92       	push	r13
    1d54:	ef 92       	push	r14
    1d56:	ff 92       	push	r15
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	ca 1b       	sub	r28, r26
    1d66:	db 0b       	sbc	r29, r27
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	09 94       	ijmp

00001d74 <__epilogue_restores__>:
    1d74:	2a 88       	ldd	r2, Y+18	; 0x12
    1d76:	39 88       	ldd	r3, Y+17	; 0x11
    1d78:	48 88       	ldd	r4, Y+16	; 0x10
    1d7a:	5f 84       	ldd	r5, Y+15	; 0x0f
    1d7c:	6e 84       	ldd	r6, Y+14	; 0x0e
    1d7e:	7d 84       	ldd	r7, Y+13	; 0x0d
    1d80:	8c 84       	ldd	r8, Y+12	; 0x0c
    1d82:	9b 84       	ldd	r9, Y+11	; 0x0b
    1d84:	aa 84       	ldd	r10, Y+10	; 0x0a
    1d86:	b9 84       	ldd	r11, Y+9	; 0x09
    1d88:	c8 84       	ldd	r12, Y+8	; 0x08
    1d8a:	df 80       	ldd	r13, Y+7	; 0x07
    1d8c:	ee 80       	ldd	r14, Y+6	; 0x06
    1d8e:	fd 80       	ldd	r15, Y+5	; 0x05
    1d90:	0c 81       	ldd	r16, Y+4	; 0x04
    1d92:	1b 81       	ldd	r17, Y+3	; 0x03
    1d94:	aa 81       	ldd	r26, Y+2	; 0x02
    1d96:	b9 81       	ldd	r27, Y+1	; 0x01
    1d98:	ce 0f       	add	r28, r30
    1d9a:	d1 1d       	adc	r29, r1
    1d9c:	0f b6       	in	r0, 0x3f	; 63
    1d9e:	f8 94       	cli
    1da0:	de bf       	out	0x3e, r29	; 62
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	cd bf       	out	0x3d, r28	; 61
    1da6:	ed 01       	movw	r28, r26
    1da8:	08 95       	ret

00001daa <_exit>:
    1daa:	f8 94       	cli

00001dac <__stop_program>:
    1dac:	ff cf       	rjmp	.-2      	; 0x1dac <__stop_program>
